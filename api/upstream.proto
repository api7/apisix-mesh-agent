syntax = "proto3";

option go_package = "github.com/apache/apisix";

import "validate/validate.proto";
import "google/protobuf/any.proto";

// [#protodoc-title: The Apache APISIX Upstream configuration]
message Upstream {
  // How many times a request can be retried while communicating to the upstream,
  // note request can be retried only if no bytes are sent to client.
  int32 retries = 1 [(validate.rules).int32.gte = 0];
  // Timeout settings about connecting, reading and sending with upstream.
  message Timeout {
    // The connect timeout setting (in seconds).
    double connect = 1 [(validate.rules).double.gt = 0];
    // The send timeout setting (in seconds).
    double send = 2 [(validate.rules).double.gt = 0];
    // The read timeout setting (in seconds).
    double read = 3 [(validate.rules).double.gt = 0];
  }
  // Timeout settings for this upstream.
  Timeout timeout = 2;
  // The load balancing algorithm.
  string type = 3 [(validate.rules).string = {
    in: [
    "chash", "roundrobin", "ewma", "lease_conn"
  ]}];
  // The scope of hash key, this field is only in effective
  // if type is "chash".
  string hash_on = 4 [(validate.rules).string = {
    in: [
      "vars", "header", "cookie", "consumer", "vars_combination"
    ]
  }, json_name="hash_on"];
  // The hash key, this field is only in effective
  // if type is "chash".
  string key = 5;
  // The health check settings for this upstream.
  HealthCheck check = 6;
  // The communication protocol to use.
  string scheme = 7 [(validate.rules).string = {
    in: [
      "grpc", "grpcs", "http", "https"
    ]
  }];
  // The host passing strategy.
  string pass_host = 8 [(validate.rules).string = {
    in: [
      "pass", "node", "rewrite"
    ]
  }];
  // The HTTP Host header to use when sending requests to this upstream.
  string upstream_host = 9 [(validate.rules).string.pattern = "^\\*?[0-9a-zA-Z-._]+$", json_name="upstream_host"];
  // The upstream name, it's useful for the logging but it's not required.
  string name = 10 [(validate.rules).string = {min_len: 1, max_len: 100}];
  // Textual descriptions used to describe the upstream use.
  string desc = 11 [(validate.rules).string.max_len = 256];
  // The upstream id.
  string id = 12;
  // Upstream nodes.
  // @inject_tag: json:"nodes"
  repeated Node nodes = 13;
}

// [#protodoc-title: The Apache APISIX Upstream Health Check configuration]
message HealthCheck {
  // Active health check settings.
  ActiveHealthCheck active = 1 [(validate.rules).message.required = true];
  // Passive health check settings.
  PassiveHealthCheck passive = 2;
}

// [#protodoc-title: Acitve Health Check configuration]
message ActiveHealthCheck {
  // The health check probe type.
  string type = 1 [(validate.rules).string = {
    in: [
      "http", "https", "tcp"
    ]
  }];
  // Timeout setting for the probe requests.
  double timeout = 2 [(validate.rules).double = {gte: 0, ignore_empty: true}];
  // How many probes can be sent simultaneously.
  int32 concurrency = 3 [(validate.rules).int32 = {gte: 0, ignore_empty: true}];
  // Host value for HTTP probes.
  string host = 4 [(validate.rules).string.pattern = "^\\*?[0-9a-zA-Z-._]+$"];
  // Specified port for the probe to sent.
  int32 port = 5 [(validate.rules).int32 = {gte: 1, lte: 65535}];
  // the URI path for HTTP probes.
  string http_path = 6 [(validate.rules).string.ignore_empty = true, json_name="http_path"];
  // Whether to verify the TLS/SSL certificate.
  bool https_verify_certificate = 7 [json_name="https_verify_certificate"];
  // health check for judging nodes become healthy.
  ActiveHealthCheckHealthy healthy = 8;
  // health check for judging nodes become unhealthy.
  ActiveHealthCheckUnhealthy unhealthy = 9;
  // The extra request headers to carry for HTTP probes.
  repeated string req_headers = 10 [(validate.rules).repeated = {
    unique: true,
    min_items: 1,
    ignore_empty: true
  }, json_name="req_headers"];
}

// [#protodoc-title: Passive Health Check configuration]
message PassiveHealthCheck {
  // The health check probe type.
  string type = 1 [(validate.rules).string = {
    in: [
      "http", "https", "tcp"
    ]
  }];
  PassiveHealthCheckHealthy healthy = 2;
  PassiveHealthCheckUnhealthy unhealthy = 3;
}

// [#protodoc-title: Active Health Check configuration for judging nodes become healthy]
message ActiveHealthCheckHealthy {
  // The interval to send a probe request.
  int32 interval = 1 [(validate.rules).int32 = {gte: 1, ignore_empty: true}];
  // Probes with status codes in this array will be treated as healthy.
  repeated int32 http_statuses = 2 [
    (validate.rules).repeated = {
      unique: true,
      min_items: 1,
      ignore_empty: true,
    },
    (validate.rules).repeated.items.int32 = {gte: 200, lte: 599},
    json_name="http_statuses"
  ];
  // How many consecutive success times should meet before a node is set to healthy.
  int32 successes = 3 [(validate.rules).int32 = {gte: 1, lte: 254, ignore_empty: true}];
}

// [#protodoc-title: Active Health Check configuration for judging nodes become unhealthy]
message ActiveHealthCheckUnhealthy {
  // The interval to send a probe request.
  int32 interval = 1 [(validate.rules).int32 = {gte: 1, ignore_empty: true}];
  // Probes with status codes in this array will be treated as unhealthy.
  repeated int32 http_statuses = 2 [
    (validate.rules).repeated = {
      unique: true,
      min_items: 1,
      ignore_empty: true,
    },
    (validate.rules).repeated.items.int32 = {gte: 200, lte: 599},
    json_name="http_statuses"
  ];
  // How many consecutive failures (http) occur should meet before a node is set to healthy.
  int32 http_failures = 3 [(validate.rules).int32 = {gte: 1, lte: 254, ignore_empty: true},json_name="http_failures"];
  // How many consecutive failures (tcp) occur should meet before a node is set to healthy.
  int32 tcp_failures = 4 [(validate.rules).int32 = {gte: 1, lte: 254, ignore_empty: true},json_name="tcp_failures"];
  // How many consecutive timeouts occur should meet before a node is set to healthy.
  int32 timeouts = 5 [(validate.rules).int32 = {gte: 1, lte: 254, ignore_empty: true}];
}

// [#protodoc-title: Passive Health Check configuration for judging nodes become healthy]
message PassiveHealthCheckHealthy {
  // Probes with status codes in this array will be treated as healthy.
  repeated int32 http_statuses = 1 [
    (validate.rules).repeated = {
      unique: true,
      min_items: 1,
      ignore_empty: true,
    },
    (validate.rules).repeated.items.int32 = {gte: 200, lte: 599},
    json_name="http_statuses"
  ];
  // How many consecutive success times should meet before a node is set to healthy.
  int32 successes = 2 [(validate.rules).int32 = {gte: 1, lte: 254, ignore_empty: true}];
}

// [#protodoc-title: Passive Health Check configuration for judging nodes become unhealthy]
message PassiveHealthCheckUnhealthy {
  // Probes with status codes in this array will be treated as unhealthy.
  repeated int32 http_statuses = 1 [
    (validate.rules).repeated = {
      unique: true,
      min_items: 1,
      ignore_empty: true,
    },
    (validate.rules).repeated.items.int32 = {gte: 200, lte: 599},
    json_name="http_statuses"
  ];
  // How many consecutive failures (http) occur should meet before a node is set to healthy.
  int32 http_failures = 2 [(validate.rules).int32 = {gte: 1, lte: 254, ignore_empty: true},json_name="http_failures"];
  // How many consecutive failures (tcp) occur should meet before a node is set to healthy.
  int32 tcp_failures = 3 [(validate.rules).int32 = {gte: 1, lte: 254, ignore_empty: true},json_name="tcp_failures"];
  // How many consecutive timeouts occur should meet before a node is set to healthy.
  int32 timeouts = 4 [(validate.rules).int32 = {gte: 1, lte: 254, ignore_empty: true}];
}

// [#protodoc-title: Upstream Node]
message Node {
  // The endpoint host (could be IPv4/IPv6 or domain).
  string host = 1 [(validate.rules).string.pattern = "^\\*?[0-9a-zA-Z-._]+$"];
  // The endpoint port.
  int32 port = 2 [(validate.rules).int32 = {gte: 1, lte: 65535}];
  // The endpoint weight.
  int32 weight = 3 [(validate.rules).int32 = {gte: 0}];
  map<string, google.protobuf.Any> metadata = 4;
}

// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/route.proto

package apisix

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _route_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on ID with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *ID) Validate() error {
	if m == nil {
		return nil
	}

	switch m.OneofId.(type) {

	case *ID_IntVal:

		if m.GetIntVal() < 1 {
			return IDValidationError{
				field:  "IntVal",
				reason: "value must be greater than or equal to 1",
			}
		}

	case *ID_StrVal:

		if l := utf8.RuneCountInString(m.GetStrVal()); l < 1 || l > 64 {
			return IDValidationError{
				field:  "StrVal",
				reason: "value length must be between 1 and 64 runes, inclusive",
			}
		}

		if !_ID_StrVal_Pattern.MatchString(m.GetStrVal()) {
			return IDValidationError{
				field:  "StrVal",
				reason: "value does not match regex pattern \"^[a-zA-Z0-9-_.]+$\"",
			}
		}

	}

	return nil
}

// IDValidationError is the validation error returned by ID.Validate if the
// designated constraints aren't met.
type IDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDValidationError) ErrorName() string { return "IDValidationError" }

// Error satisfies the builtin error interface
func (e IDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sID.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDValidationError{}

var _ID_StrVal_Pattern = regexp.MustCompile("^[a-zA-Z0-9-_.]+$")

// Validate checks the field values on Route with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Route) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetUris()) < 1 {
		return RouteValidationError{
			field:  "Uris",
			reason: "value must contain at least 1 item(s)",
		}
	}

	_Route_Uris_Unique := make(map[string]struct{}, len(m.GetUris()))

	for idx, item := range m.GetUris() {
		_, _ = idx, item

		if _, exists := _Route_Uris_Unique[item]; exists {
			return RouteValidationError{
				field:  fmt.Sprintf("Uris[%v]", idx),
				reason: "repeated value must contain unique items",
			}
		} else {
			_Route_Uris_Unique[item] = struct{}{}
		}

		// no validation rules for Uris[idx]
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 100 {
		return RouteValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RouteValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if utf8.RuneCountInString(m.GetDesc()) > 256 {
		return RouteValidationError{
			field:  "Desc",
			reason: "value length must be at most 256 runes",
		}
	}

	// no validation rules for Priority

	_Route_Methods_Unique := make(map[string]struct{}, len(m.GetMethods()))

	for idx, item := range m.GetMethods() {
		_, _ = idx, item

		if _, exists := _Route_Methods_Unique[item]; exists {
			return RouteValidationError{
				field:  fmt.Sprintf("Methods[%v]", idx),
				reason: "repeated value must contain unique items",
			}
		} else {
			_Route_Methods_Unique[item] = struct{}{}
		}

		if _, ok := _Route_Methods_InLookup[item]; !ok {
			return RouteValidationError{
				field:  fmt.Sprintf("Methods[%v]", idx),
				reason: "value must be in list [GET POST PUT DELETE PATCH HEAD OPTIONS CONNECT TRACE]",
			}
		}

	}

	if len(m.GetHosts()) < 1 {
		return RouteValidationError{
			field:  "Hosts",
			reason: "value must contain at least 1 item(s)",
		}
	}

	_Route_Hosts_Unique := make(map[string]struct{}, len(m.GetHosts()))

	for idx, item := range m.GetHosts() {
		_, _ = idx, item

		if _, exists := _Route_Hosts_Unique[item]; exists {
			return RouteValidationError{
				field:  fmt.Sprintf("Hosts[%v]", idx),
				reason: "repeated value must contain unique items",
			}
		} else {
			_Route_Hosts_Unique[item] = struct{}{}
		}

		if !_Route_Hosts_Pattern.MatchString(item) {
			return RouteValidationError{
				field:  fmt.Sprintf("Hosts[%v]", idx),
				reason: "value does not match regex pattern \"^\\\\*?[0-9a-zA-Z-._]+$\"",
			}
		}

	}

	if len(m.GetRemoteAddrs()) < 1 {
		return RouteValidationError{
			field:  "RemoteAddrs",
			reason: "value must contain at least 1 item(s)",
		}
	}

	_Route_RemoteAddrs_Unique := make(map[string]struct{}, len(m.GetRemoteAddrs()))

	for idx, item := range m.GetRemoteAddrs() {
		_, _ = idx, item

		if _, exists := _Route_RemoteAddrs_Unique[item]; exists {
			return RouteValidationError{
				field:  fmt.Sprintf("RemoteAddrs[%v]", idx),
				reason: "repeated value must contain unique items",
			}
		} else {
			_Route_RemoteAddrs_Unique[item] = struct{}{}
		}

		// no validation rules for RemoteAddrs[idx]
	}

	if l := len(m.GetVars()); l < 2 || l > 4 {
		return RouteValidationError{
			field:  "Vars",
			reason: "value must contain between 2 and 4 items, inclusive",
		}
	}

	if v, ok := interface{}(m.GetPlugins()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RouteValidationError{
				field:  "Plugins",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetServiceId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RouteValidationError{
				field:  "ServiceId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpstreamId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RouteValidationError{
				field:  "UpstreamId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Status

	return nil
}

// RouteValidationError is the validation error returned by Route.Validate if
// the designated constraints aren't met.
type RouteValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RouteValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RouteValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RouteValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RouteValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RouteValidationError) ErrorName() string { return "RouteValidationError" }

// Error satisfies the builtin error interface
func (e RouteValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoute.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RouteValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RouteValidationError{}

var _Route_Methods_InLookup = map[string]struct{}{
	"GET":     {},
	"POST":    {},
	"PUT":     {},
	"DELETE":  {},
	"PATCH":   {},
	"HEAD":    {},
	"OPTIONS": {},
	"CONNECT": {},
	"TRACE":   {},
}

var _Route_Hosts_Pattern = regexp.MustCompile("^\\*?[0-9a-zA-Z-._]+$")

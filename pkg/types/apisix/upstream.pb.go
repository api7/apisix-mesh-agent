// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.12.3
// source: upstream.proto

package apisix

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	any "github.com/golang/protobuf/ptypes/any"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// [#protodoc-title: The Apache APISIX Upstream configuration]
type Upstream struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// How many times a request can be retried while communicating to the upstream,
	// note request can be retried only if no bytes are sent to client.
	Retries int32 `protobuf:"varint,1,opt,name=retries,proto3" json:"retries,omitempty"`
	// Timeout settings for this upstream.
	Timeout *Upstream_Timeout `protobuf:"bytes,2,opt,name=timeout,proto3" json:"timeout,omitempty"`
	// The load balancing algorithm.
	Type string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	// The scope of hash key, this field is only in effective
	// if type is "chash".
	HashOn string `protobuf:"bytes,4,opt,name=hash_on,json=hashOn,proto3" json:"hash_on,omitempty"`
	// The hash key, this field is only in effective
	// if type is "chash".
	Key string `protobuf:"bytes,5,opt,name=key,proto3" json:"key,omitempty"`
	// The health check settings for this upstream.
	Check *HealthCheck `protobuf:"bytes,6,opt,name=check,proto3" json:"check,omitempty"`
	// The communication protocol to use.
	Scheme string `protobuf:"bytes,7,opt,name=scheme,proto3" json:"scheme,omitempty"`
	// The host passing strategy.
	PassHost string `protobuf:"bytes,8,opt,name=pass_host,json=passHost,proto3" json:"pass_host,omitempty"`
	// The HTTP Host header to use when sending requests to this upstream.
	UpstreamHost string `protobuf:"bytes,9,opt,name=upstream_host,json=upstreamHost,proto3" json:"upstream_host,omitempty"`
	// The upstream name, it's useful for the logging but it's not required.
	Name string `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
	// Textual descriptions used to describe the upstream use.
	Desc string `protobuf:"bytes,11,opt,name=desc,proto3" json:"desc,omitempty"`
	// The upstream id.
	Id string `protobuf:"bytes,12,opt,name=id,proto3" json:"id,omitempty"`
	// Upstream nodes.
	// @inject_tag: json:"nodes"
	Nodes []*Node `protobuf:"bytes,13,rep,name=nodes,proto3" json:"nodes"`
}

func (x *Upstream) Reset() {
	*x = Upstream{}
	if protoimpl.UnsafeEnabled {
		mi := &file_upstream_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Upstream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Upstream) ProtoMessage() {}

func (x *Upstream) ProtoReflect() protoreflect.Message {
	mi := &file_upstream_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Upstream.ProtoReflect.Descriptor instead.
func (*Upstream) Descriptor() ([]byte, []int) {
	return file_upstream_proto_rawDescGZIP(), []int{0}
}

func (x *Upstream) GetRetries() int32 {
	if x != nil {
		return x.Retries
	}
	return 0
}

func (x *Upstream) GetTimeout() *Upstream_Timeout {
	if x != nil {
		return x.Timeout
	}
	return nil
}

func (x *Upstream) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Upstream) GetHashOn() string {
	if x != nil {
		return x.HashOn
	}
	return ""
}

func (x *Upstream) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Upstream) GetCheck() *HealthCheck {
	if x != nil {
		return x.Check
	}
	return nil
}

func (x *Upstream) GetScheme() string {
	if x != nil {
		return x.Scheme
	}
	return ""
}

func (x *Upstream) GetPassHost() string {
	if x != nil {
		return x.PassHost
	}
	return ""
}

func (x *Upstream) GetUpstreamHost() string {
	if x != nil {
		return x.UpstreamHost
	}
	return ""
}

func (x *Upstream) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Upstream) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *Upstream) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Upstream) GetNodes() []*Node {
	if x != nil {
		return x.Nodes
	}
	return nil
}

// [#protodoc-title: The Apache APISIX Upstream Health Check configuration]
type HealthCheck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Active health check settings.
	Active *ActiveHealthCheck `protobuf:"bytes,1,opt,name=active,proto3" json:"active,omitempty"`
	// Passive health check settings.
	Passive *PassiveHealthCheck `protobuf:"bytes,2,opt,name=passive,proto3" json:"passive,omitempty"`
}

func (x *HealthCheck) Reset() {
	*x = HealthCheck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_upstream_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthCheck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheck) ProtoMessage() {}

func (x *HealthCheck) ProtoReflect() protoreflect.Message {
	mi := &file_upstream_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheck.ProtoReflect.Descriptor instead.
func (*HealthCheck) Descriptor() ([]byte, []int) {
	return file_upstream_proto_rawDescGZIP(), []int{1}
}

func (x *HealthCheck) GetActive() *ActiveHealthCheck {
	if x != nil {
		return x.Active
	}
	return nil
}

func (x *HealthCheck) GetPassive() *PassiveHealthCheck {
	if x != nil {
		return x.Passive
	}
	return nil
}

// [#protodoc-title: Acitve Health Check configuration]
type ActiveHealthCheck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The health check probe type.
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// Timeout setting for the probe requests.
	Timeout float64 `protobuf:"fixed64,2,opt,name=timeout,proto3" json:"timeout,omitempty"`
	// How many probes can be sent simultaneously.
	Concurrency int32 `protobuf:"varint,3,opt,name=concurrency,proto3" json:"concurrency,omitempty"`
	// Host value for HTTP probes.
	Host string `protobuf:"bytes,4,opt,name=host,proto3" json:"host,omitempty"`
	// Specified port for the probe to sent.
	Port int32 `protobuf:"varint,5,opt,name=port,proto3" json:"port,omitempty"`
	// the URI path for HTTP probes.
	HttpPath string `protobuf:"bytes,6,opt,name=http_path,json=httpPath,proto3" json:"http_path,omitempty"`
	// Whether to verify the TLS/SSL certificate.
	HttpsVerifyCertificate bool `protobuf:"varint,7,opt,name=https_verify_certificate,json=httpsVerifyCertificate,proto3" json:"https_verify_certificate,omitempty"`
	// health check for judging nodes become healthy.
	Healthy *ActiveHealthCheckHealthy `protobuf:"bytes,8,opt,name=healthy,proto3" json:"healthy,omitempty"`
	// health check for judging nodes become unhealthy.
	Unhealthy *ActiveHealthCheckUnhealthy `protobuf:"bytes,9,opt,name=unhealthy,proto3" json:"unhealthy,omitempty"`
	// The extra request headers to carry for HTTP probes.
	ReqHeaders []string `protobuf:"bytes,10,rep,name=req_headers,json=reqHeaders,proto3" json:"req_headers,omitempty"`
}

func (x *ActiveHealthCheck) Reset() {
	*x = ActiveHealthCheck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_upstream_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActiveHealthCheck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActiveHealthCheck) ProtoMessage() {}

func (x *ActiveHealthCheck) ProtoReflect() protoreflect.Message {
	mi := &file_upstream_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActiveHealthCheck.ProtoReflect.Descriptor instead.
func (*ActiveHealthCheck) Descriptor() ([]byte, []int) {
	return file_upstream_proto_rawDescGZIP(), []int{2}
}

func (x *ActiveHealthCheck) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ActiveHealthCheck) GetTimeout() float64 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *ActiveHealthCheck) GetConcurrency() int32 {
	if x != nil {
		return x.Concurrency
	}
	return 0
}

func (x *ActiveHealthCheck) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *ActiveHealthCheck) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *ActiveHealthCheck) GetHttpPath() string {
	if x != nil {
		return x.HttpPath
	}
	return ""
}

func (x *ActiveHealthCheck) GetHttpsVerifyCertificate() bool {
	if x != nil {
		return x.HttpsVerifyCertificate
	}
	return false
}

func (x *ActiveHealthCheck) GetHealthy() *ActiveHealthCheckHealthy {
	if x != nil {
		return x.Healthy
	}
	return nil
}

func (x *ActiveHealthCheck) GetUnhealthy() *ActiveHealthCheckUnhealthy {
	if x != nil {
		return x.Unhealthy
	}
	return nil
}

func (x *ActiveHealthCheck) GetReqHeaders() []string {
	if x != nil {
		return x.ReqHeaders
	}
	return nil
}

// [#protodoc-title: Passive Health Check configuration]
type PassiveHealthCheck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The health check probe type.
	Type      string                       `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Healthy   *PassiveHealthCheckHealthy   `protobuf:"bytes,2,opt,name=healthy,proto3" json:"healthy,omitempty"`
	Unhealthy *PassiveHealthCheckUnhealthy `protobuf:"bytes,3,opt,name=unhealthy,proto3" json:"unhealthy,omitempty"`
}

func (x *PassiveHealthCheck) Reset() {
	*x = PassiveHealthCheck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_upstream_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PassiveHealthCheck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PassiveHealthCheck) ProtoMessage() {}

func (x *PassiveHealthCheck) ProtoReflect() protoreflect.Message {
	mi := &file_upstream_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PassiveHealthCheck.ProtoReflect.Descriptor instead.
func (*PassiveHealthCheck) Descriptor() ([]byte, []int) {
	return file_upstream_proto_rawDescGZIP(), []int{3}
}

func (x *PassiveHealthCheck) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *PassiveHealthCheck) GetHealthy() *PassiveHealthCheckHealthy {
	if x != nil {
		return x.Healthy
	}
	return nil
}

func (x *PassiveHealthCheck) GetUnhealthy() *PassiveHealthCheckUnhealthy {
	if x != nil {
		return x.Unhealthy
	}
	return nil
}

// [#protodoc-title: Active Health Check configuration for judging nodes become healthy]
type ActiveHealthCheckHealthy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The interval to send a probe request.
	Interval int32 `protobuf:"varint,1,opt,name=interval,proto3" json:"interval,omitempty"`
	// Probes with status codes in this array will be treated as healthy.
	HttpStatuses []int32 `protobuf:"varint,2,rep,packed,name=http_statuses,json=httpStatuses,proto3" json:"http_statuses,omitempty"`
	// How many consecutive success times should meet before a node is set to healthy.
	Successes int32 `protobuf:"varint,3,opt,name=successes,proto3" json:"successes,omitempty"`
}

func (x *ActiveHealthCheckHealthy) Reset() {
	*x = ActiveHealthCheckHealthy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_upstream_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActiveHealthCheckHealthy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActiveHealthCheckHealthy) ProtoMessage() {}

func (x *ActiveHealthCheckHealthy) ProtoReflect() protoreflect.Message {
	mi := &file_upstream_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActiveHealthCheckHealthy.ProtoReflect.Descriptor instead.
func (*ActiveHealthCheckHealthy) Descriptor() ([]byte, []int) {
	return file_upstream_proto_rawDescGZIP(), []int{4}
}

func (x *ActiveHealthCheckHealthy) GetInterval() int32 {
	if x != nil {
		return x.Interval
	}
	return 0
}

func (x *ActiveHealthCheckHealthy) GetHttpStatuses() []int32 {
	if x != nil {
		return x.HttpStatuses
	}
	return nil
}

func (x *ActiveHealthCheckHealthy) GetSuccesses() int32 {
	if x != nil {
		return x.Successes
	}
	return 0
}

// [#protodoc-title: Active Health Check configuration for judging nodes become unhealthy]
type ActiveHealthCheckUnhealthy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The interval to send a probe request.
	Interval int32 `protobuf:"varint,1,opt,name=interval,proto3" json:"interval,omitempty"`
	// Probes with status codes in this array will be treated as unhealthy.
	HttpStatuses []int32 `protobuf:"varint,2,rep,packed,name=http_statuses,json=httpStatuses,proto3" json:"http_statuses,omitempty"`
	// How many consecutive failures (http) occur should meet before a node is set to healthy.
	HttpFailures int32 `protobuf:"varint,3,opt,name=http_failures,json=httpFailures,proto3" json:"http_failures,omitempty"`
	// How many consecutive failures (tcp) occur should meet before a node is set to healthy.
	TcpFailures int32 `protobuf:"varint,4,opt,name=tcp_failures,json=tcpFailures,proto3" json:"tcp_failures,omitempty"`
	// How many consecutive timeouts occur should meet before a node is set to healthy.
	Timeouts int32 `protobuf:"varint,5,opt,name=timeouts,proto3" json:"timeouts,omitempty"`
}

func (x *ActiveHealthCheckUnhealthy) Reset() {
	*x = ActiveHealthCheckUnhealthy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_upstream_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActiveHealthCheckUnhealthy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActiveHealthCheckUnhealthy) ProtoMessage() {}

func (x *ActiveHealthCheckUnhealthy) ProtoReflect() protoreflect.Message {
	mi := &file_upstream_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActiveHealthCheckUnhealthy.ProtoReflect.Descriptor instead.
func (*ActiveHealthCheckUnhealthy) Descriptor() ([]byte, []int) {
	return file_upstream_proto_rawDescGZIP(), []int{5}
}

func (x *ActiveHealthCheckUnhealthy) GetInterval() int32 {
	if x != nil {
		return x.Interval
	}
	return 0
}

func (x *ActiveHealthCheckUnhealthy) GetHttpStatuses() []int32 {
	if x != nil {
		return x.HttpStatuses
	}
	return nil
}

func (x *ActiveHealthCheckUnhealthy) GetHttpFailures() int32 {
	if x != nil {
		return x.HttpFailures
	}
	return 0
}

func (x *ActiveHealthCheckUnhealthy) GetTcpFailures() int32 {
	if x != nil {
		return x.TcpFailures
	}
	return 0
}

func (x *ActiveHealthCheckUnhealthy) GetTimeouts() int32 {
	if x != nil {
		return x.Timeouts
	}
	return 0
}

// [#protodoc-title: Passive Health Check configuration for judging nodes become healthy]
type PassiveHealthCheckHealthy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Probes with status codes in this array will be treated as healthy.
	HttpStatuses []int32 `protobuf:"varint,1,rep,packed,name=http_statuses,json=httpStatuses,proto3" json:"http_statuses,omitempty"`
	// How many consecutive success times should meet before a node is set to healthy.
	Successes int32 `protobuf:"varint,2,opt,name=successes,proto3" json:"successes,omitempty"`
}

func (x *PassiveHealthCheckHealthy) Reset() {
	*x = PassiveHealthCheckHealthy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_upstream_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PassiveHealthCheckHealthy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PassiveHealthCheckHealthy) ProtoMessage() {}

func (x *PassiveHealthCheckHealthy) ProtoReflect() protoreflect.Message {
	mi := &file_upstream_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PassiveHealthCheckHealthy.ProtoReflect.Descriptor instead.
func (*PassiveHealthCheckHealthy) Descriptor() ([]byte, []int) {
	return file_upstream_proto_rawDescGZIP(), []int{6}
}

func (x *PassiveHealthCheckHealthy) GetHttpStatuses() []int32 {
	if x != nil {
		return x.HttpStatuses
	}
	return nil
}

func (x *PassiveHealthCheckHealthy) GetSuccesses() int32 {
	if x != nil {
		return x.Successes
	}
	return 0
}

// [#protodoc-title: Passive Health Check configuration for judging nodes become unhealthy]
type PassiveHealthCheckUnhealthy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Probes with status codes in this array will be treated as unhealthy.
	HttpStatuses []int32 `protobuf:"varint,1,rep,packed,name=http_statuses,json=httpStatuses,proto3" json:"http_statuses,omitempty"`
	// How many consecutive failures (http) occur should meet before a node is set to healthy.
	HttpFailures int32 `protobuf:"varint,2,opt,name=http_failures,json=httpFailures,proto3" json:"http_failures,omitempty"`
	// How many consecutive failures (tcp) occur should meet before a node is set to healthy.
	TcpFailures int32 `protobuf:"varint,3,opt,name=tcp_failures,json=tcpFailures,proto3" json:"tcp_failures,omitempty"`
	// How many consecutive timeouts occur should meet before a node is set to healthy.
	Timeouts int32 `protobuf:"varint,4,opt,name=timeouts,proto3" json:"timeouts,omitempty"`
}

func (x *PassiveHealthCheckUnhealthy) Reset() {
	*x = PassiveHealthCheckUnhealthy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_upstream_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PassiveHealthCheckUnhealthy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PassiveHealthCheckUnhealthy) ProtoMessage() {}

func (x *PassiveHealthCheckUnhealthy) ProtoReflect() protoreflect.Message {
	mi := &file_upstream_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PassiveHealthCheckUnhealthy.ProtoReflect.Descriptor instead.
func (*PassiveHealthCheckUnhealthy) Descriptor() ([]byte, []int) {
	return file_upstream_proto_rawDescGZIP(), []int{7}
}

func (x *PassiveHealthCheckUnhealthy) GetHttpStatuses() []int32 {
	if x != nil {
		return x.HttpStatuses
	}
	return nil
}

func (x *PassiveHealthCheckUnhealthy) GetHttpFailures() int32 {
	if x != nil {
		return x.HttpFailures
	}
	return 0
}

func (x *PassiveHealthCheckUnhealthy) GetTcpFailures() int32 {
	if x != nil {
		return x.TcpFailures
	}
	return 0
}

func (x *PassiveHealthCheckUnhealthy) GetTimeouts() int32 {
	if x != nil {
		return x.Timeouts
	}
	return 0
}

// [#protodoc-title: Upstream Node]
type Node struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The endpoint host (could be IPv4/IPv6 or domain).
	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	// The endpoint port.
	Port int32 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	// The endpoint weight.
	Weight   int32               `protobuf:"varint,3,opt,name=weight,proto3" json:"weight,omitempty"`
	Metadata map[string]*any.Any `protobuf:"bytes,4,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Node) Reset() {
	*x = Node{}
	if protoimpl.UnsafeEnabled {
		mi := &file_upstream_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node) ProtoMessage() {}

func (x *Node) ProtoReflect() protoreflect.Message {
	mi := &file_upstream_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node.ProtoReflect.Descriptor instead.
func (*Node) Descriptor() ([]byte, []int) {
	return file_upstream_proto_rawDescGZIP(), []int{8}
}

func (x *Node) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *Node) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *Node) GetWeight() int32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *Node) GetMetadata() map[string]*any.Any {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// Timeout settings about connecting, reading and sending with upstream.
type Upstream_Timeout struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The connect timeout setting (in seconds).
	Connect float64 `protobuf:"fixed64,1,opt,name=connect,proto3" json:"connect,omitempty"`
	// The send timeout setting (in seconds).
	Send float64 `protobuf:"fixed64,2,opt,name=send,proto3" json:"send,omitempty"`
	// The read timeout setting (in seconds).
	Read float64 `protobuf:"fixed64,3,opt,name=read,proto3" json:"read,omitempty"`
}

func (x *Upstream_Timeout) Reset() {
	*x = Upstream_Timeout{}
	if protoimpl.UnsafeEnabled {
		mi := &file_upstream_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Upstream_Timeout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Upstream_Timeout) ProtoMessage() {}

func (x *Upstream_Timeout) ProtoReflect() protoreflect.Message {
	mi := &file_upstream_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Upstream_Timeout.ProtoReflect.Descriptor instead.
func (*Upstream_Timeout) Descriptor() ([]byte, []int) {
	return file_upstream_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Upstream_Timeout) GetConnect() float64 {
	if x != nil {
		return x.Connect
	}
	return 0
}

func (x *Upstream_Timeout) GetSend() float64 {
	if x != nil {
		return x.Send
	}
	return 0
}

func (x *Upstream_Timeout) GetRead() float64 {
	if x != nil {
		return x.Read
	}
	return 0
}

var File_upstream_proto protoreflect.FileDescriptor

var file_upstream_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbd, 0x05, 0x0a, 0x08, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x12, 0x21, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x28, 0x00, 0x52, 0x07, 0x72, 0x65, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x12, 0x3e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x2a, 0xfa, 0x42, 0x27, 0x72, 0x25, 0x52, 0x05, 0x63, 0x68, 0x61, 0x73, 0x68, 0x52, 0x0a, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x52, 0x04, 0x65, 0x77, 0x6d, 0x61, 0x52,
	0x0a, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x50, 0x0a, 0x07, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x37, 0xfa, 0x42, 0x34, 0x72, 0x32, 0x52, 0x04, 0x76, 0x61, 0x72, 0x73, 0x52,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x52,
	0x08, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x52, 0x10, 0x76, 0x61, 0x72, 0x73, 0x5f,
	0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x68, 0x61, 0x73,
	0x68, 0x4f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x22, 0x0a, 0x05, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x52, 0x05, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x37, 0x0a, 0x06, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0xfa, 0x42, 0x1c, 0x72, 0x1a,
	0x52, 0x04, 0x67, 0x72, 0x70, 0x63, 0x52, 0x05, 0x67, 0x72, 0x70, 0x63, 0x73, 0x52, 0x04, 0x68,
	0x74, 0x74, 0x70, 0x52, 0x05, 0x68, 0x74, 0x74, 0x70, 0x73, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0xfa, 0x42, 0x17, 0x72, 0x15, 0x52, 0x04, 0x70, 0x61,
	0x73, 0x73, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x77, 0x72, 0x69, 0x74,
	0x65, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x0d, 0x75,
	0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x1b, 0xfa, 0x42, 0x18, 0x72, 0x16, 0x32, 0x14, 0x5e, 0x5c, 0x2a, 0x3f, 0x5b,
	0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x2e, 0x5f, 0x5d, 0x2b, 0x24, 0x52,
	0x0c, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06,
	0x72, 0x04, 0x10, 0x01, 0x18, 0x64, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x04,
	0x64, 0x65, 0x73, 0x63, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72,
	0x03, 0x18, 0x80, 0x02, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x05, 0x6e, 0x6f,
	0x64, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x1a, 0x7b, 0x0a, 0x07, 0x54, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x12, 0x28, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x01, 0x42, 0x0e, 0xfa, 0x42, 0x0b, 0x12, 0x09, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0x22, 0x0a, 0x04,
	0x73, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x42, 0x0e, 0xfa, 0x42, 0x0b, 0x12,
	0x09, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x52, 0x04, 0x73, 0x65, 0x6e, 0x64,
	0x12, 0x22, 0x0a, 0x04, 0x72, 0x65, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x42, 0x0e,
	0xfa, 0x42, 0x0b, 0x12, 0x09, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x52, 0x04,
	0x72, 0x65, 0x61, 0x64, 0x22, 0x72, 0x0a, 0x0b, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x12, 0x34, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x48, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10,
	0x01, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x2d, 0x0a, 0x07, 0x70, 0x61, 0x73,
	0x73, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x50, 0x61, 0x73,
	0x73, 0x69, 0x76, 0x65, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52,
	0x07, 0x70, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x22, 0xeb, 0x03, 0x0a, 0x11, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x2b,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xfa, 0x42,
	0x14, 0x72, 0x12, 0x52, 0x04, 0x68, 0x74, 0x74, 0x70, 0x52, 0x05, 0x68, 0x74, 0x74, 0x70, 0x73,
	0x52, 0x03, 0x74, 0x63, 0x70, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x07, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x42, 0x10, 0xfa, 0x42,
	0x0d, 0x12, 0x0b, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x01, 0x52, 0x07,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x2b, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09, 0xfa, 0x42,
	0x06, 0x1a, 0x04, 0x28, 0x00, 0x40, 0x01, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x12, 0x2f, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x1b, 0xfa, 0x42, 0x18, 0x72, 0x16, 0x32, 0x14, 0x5e, 0x5c, 0x2a, 0x3f, 0x5b,
	0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x2e, 0x5f, 0x5d, 0x2b, 0x24, 0x52,
	0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x0b, 0xfa, 0x42, 0x08, 0x1a, 0x06, 0x18, 0xff, 0xff, 0x03, 0x28, 0x01,
	0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x25, 0x0a, 0x09, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03,
	0xd0, 0x01, 0x01, 0x52, 0x08, 0x68, 0x74, 0x74, 0x70, 0x50, 0x61, 0x74, 0x68, 0x12, 0x38, 0x0a,
	0x18, 0x68, 0x74, 0x74, 0x70, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x5f, 0x63, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x16, 0x68, 0x74, 0x74, 0x70, 0x73, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x79, 0x52, 0x07, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x12, 0x39, 0x0a, 0x09,
	0x75, 0x6e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x55, 0x6e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x52, 0x09, 0x75, 0x6e,
	0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x12, 0x2d, 0x0a, 0x0b, 0x72, 0x65, 0x71, 0x5f, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0c, 0xfa, 0x42,
	0x09, 0x92, 0x01, 0x06, 0x08, 0x01, 0x18, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x72, 0x65, 0x71, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x22, 0xb3, 0x01, 0x0a, 0x12, 0x50, 0x61, 0x73, 0x73, 0x69,
	0x76, 0x65, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x2b, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xfa, 0x42, 0x14,
	0x72, 0x12, 0x52, 0x04, 0x68, 0x74, 0x74, 0x70, 0x52, 0x05, 0x68, 0x74, 0x74, 0x70, 0x73, 0x52,
	0x03, 0x74, 0x63, 0x70, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x68, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x50, 0x61,
	0x73, 0x73, 0x69, 0x76, 0x65, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x52, 0x07, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79,
	0x12, 0x3a, 0x0a, 0x09, 0x75, 0x6e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x48, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x6e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x79, 0x52, 0x09, 0x75, 0x6e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x22, 0xb0, 0x01, 0x0a,
	0x18, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x12, 0x25, 0x0a, 0x08, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09, 0xfa, 0x42, 0x06,
	0x1a, 0x04, 0x28, 0x01, 0x40, 0x01, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x12, 0x41, 0x0a, 0x0d, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x42, 0x1c, 0xfa, 0x42, 0x09, 0x92, 0x01, 0x06, 0x08,
	0x01, 0x18, 0x01, 0x28, 0x01, 0xfa, 0x42, 0x0d, 0x92, 0x01, 0x0a, 0x22, 0x08, 0x1a, 0x06, 0x18,
	0xd7, 0x04, 0x28, 0xc8, 0x01, 0x52, 0x0c, 0x68, 0x74, 0x74, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x09, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0c, 0xfa, 0x42, 0x09, 0x1a, 0x07, 0x18, 0xfe, 0x01,
	0x28, 0x01, 0x40, 0x01, 0x52, 0x09, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x22,
	0x94, 0x02, 0x0a, 0x1a, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x6e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x12, 0x25,
	0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x09, 0xfa, 0x42, 0x06, 0x1a, 0x04, 0x28, 0x01, 0x40, 0x01, 0x52, 0x08, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x41, 0x0a, 0x0d, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x42, 0x1c, 0xfa, 0x42,
	0x09, 0x92, 0x01, 0x06, 0x08, 0x01, 0x18, 0x01, 0x28, 0x01, 0xfa, 0x42, 0x0d, 0x92, 0x01, 0x0a,
	0x22, 0x08, 0x1a, 0x06, 0x18, 0xd7, 0x04, 0x28, 0xc8, 0x01, 0x52, 0x0c, 0x68, 0x74, 0x74, 0x70,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x0d, 0x68, 0x74, 0x74, 0x70,
	0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x0c, 0xfa, 0x42, 0x09, 0x1a, 0x07, 0x18, 0xfe, 0x01, 0x28, 0x01, 0x40, 0x01, 0x52, 0x0c, 0x68,
	0x74, 0x74, 0x70, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x0c, 0x74,
	0x63, 0x70, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x0c, 0xfa, 0x42, 0x09, 0x1a, 0x07, 0x18, 0xfe, 0x01, 0x28, 0x01, 0x40, 0x01, 0x52,
	0x0b, 0x74, 0x63, 0x70, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x08,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0c,
	0xfa, 0x42, 0x09, 0x1a, 0x07, 0x18, 0xfe, 0x01, 0x28, 0x01, 0x40, 0x01, 0x52, 0x08, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x73, 0x22, 0x8a, 0x01, 0x0a, 0x19, 0x50, 0x61, 0x73, 0x73, 0x69,
	0x76, 0x65, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x48, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x79, 0x12, 0x41, 0x0a, 0x0d, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x42, 0x1c, 0xfa, 0x42, 0x09,
	0x92, 0x01, 0x06, 0x08, 0x01, 0x18, 0x01, 0x28, 0x01, 0xfa, 0x42, 0x0d, 0x92, 0x01, 0x0a, 0x22,
	0x08, 0x1a, 0x06, 0x18, 0xd7, 0x04, 0x28, 0xc8, 0x01, 0x52, 0x0c, 0x68, 0x74, 0x74, 0x70, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x09, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0c, 0xfa, 0x42, 0x09, 0x1a,
	0x07, 0x18, 0xfe, 0x01, 0x28, 0x01, 0x40, 0x01, 0x52, 0x09, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x22, 0xee, 0x01, 0x0a, 0x1b, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x48,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x6e, 0x68, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x79, 0x12, 0x41, 0x0a, 0x0d, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x42, 0x1c, 0xfa, 0x42, 0x09, 0x92,
	0x01, 0x06, 0x08, 0x01, 0x18, 0x01, 0x28, 0x01, 0xfa, 0x42, 0x0d, 0x92, 0x01, 0x0a, 0x22, 0x08,
	0x1a, 0x06, 0x18, 0xd7, 0x04, 0x28, 0xc8, 0x01, 0x52, 0x0c, 0x68, 0x74, 0x74, 0x70, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x0d, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x66,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0c, 0xfa,
	0x42, 0x09, 0x1a, 0x07, 0x18, 0xfe, 0x01, 0x28, 0x01, 0x40, 0x01, 0x52, 0x0c, 0x68, 0x74, 0x74,
	0x70, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x0c, 0x74, 0x63, 0x70,
	0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x0c, 0xfa, 0x42, 0x09, 0x1a, 0x07, 0x18, 0xfe, 0x01, 0x28, 0x01, 0x40, 0x01, 0x52, 0x0b, 0x74,
	0x63, 0x70, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x08, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0c, 0xfa, 0x42,
	0x09, 0x1a, 0x07, 0x18, 0xfe, 0x01, 0x28, 0x01, 0x40, 0x01, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x73, 0x22, 0xfd, 0x01, 0x0a, 0x04, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x2f, 0x0a,
	0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0xfa, 0x42, 0x18,
	0x72, 0x16, 0x32, 0x14, 0x5e, 0x5c, 0x2a, 0x3f, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41,
	0x2d, 0x5a, 0x2d, 0x2e, 0x5f, 0x5d, 0x2b, 0x24, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x1f,
	0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0b, 0xfa, 0x42,
	0x08, 0x1a, 0x06, 0x18, 0xff, 0xff, 0x03, 0x28, 0x01, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x1f, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x28, 0x00, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x2f, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x1a, 0x51, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x42, 0x0a, 0x5a, 0x08, 0x2e, 0x3b, 0x61, 0x70, 0x69, 0x73, 0x69, 0x78,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_upstream_proto_rawDescOnce sync.Once
	file_upstream_proto_rawDescData = file_upstream_proto_rawDesc
)

func file_upstream_proto_rawDescGZIP() []byte {
	file_upstream_proto_rawDescOnce.Do(func() {
		file_upstream_proto_rawDescData = protoimpl.X.CompressGZIP(file_upstream_proto_rawDescData)
	})
	return file_upstream_proto_rawDescData
}

var file_upstream_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_upstream_proto_goTypes = []interface{}{
	(*Upstream)(nil),                    // 0: Upstream
	(*HealthCheck)(nil),                 // 1: HealthCheck
	(*ActiveHealthCheck)(nil),           // 2: ActiveHealthCheck
	(*PassiveHealthCheck)(nil),          // 3: PassiveHealthCheck
	(*ActiveHealthCheckHealthy)(nil),    // 4: ActiveHealthCheckHealthy
	(*ActiveHealthCheckUnhealthy)(nil),  // 5: ActiveHealthCheckUnhealthy
	(*PassiveHealthCheckHealthy)(nil),   // 6: PassiveHealthCheckHealthy
	(*PassiveHealthCheckUnhealthy)(nil), // 7: PassiveHealthCheckUnhealthy
	(*Node)(nil),                        // 8: Node
	(*Upstream_Timeout)(nil),            // 9: Upstream.Timeout
	nil,                                 // 10: Node.MetadataEntry
	(*any.Any)(nil),                     // 11: google.protobuf.Any
}
var file_upstream_proto_depIdxs = []int32{
	9,  // 0: Upstream.timeout:type_name -> Upstream.Timeout
	1,  // 1: Upstream.check:type_name -> HealthCheck
	8,  // 2: Upstream.nodes:type_name -> Node
	2,  // 3: HealthCheck.active:type_name -> ActiveHealthCheck
	3,  // 4: HealthCheck.passive:type_name -> PassiveHealthCheck
	4,  // 5: ActiveHealthCheck.healthy:type_name -> ActiveHealthCheckHealthy
	5,  // 6: ActiveHealthCheck.unhealthy:type_name -> ActiveHealthCheckUnhealthy
	6,  // 7: PassiveHealthCheck.healthy:type_name -> PassiveHealthCheckHealthy
	7,  // 8: PassiveHealthCheck.unhealthy:type_name -> PassiveHealthCheckUnhealthy
	10, // 9: Node.metadata:type_name -> Node.MetadataEntry
	11, // 10: Node.MetadataEntry.value:type_name -> google.protobuf.Any
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_upstream_proto_init() }
func file_upstream_proto_init() {
	if File_upstream_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_upstream_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Upstream); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_upstream_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthCheck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_upstream_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActiveHealthCheck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_upstream_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PassiveHealthCheck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_upstream_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActiveHealthCheckHealthy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_upstream_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActiveHealthCheckUnhealthy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_upstream_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PassiveHealthCheckHealthy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_upstream_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PassiveHealthCheckUnhealthy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_upstream_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Node); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_upstream_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Upstream_Timeout); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_upstream_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_upstream_proto_goTypes,
		DependencyIndexes: file_upstream_proto_depIdxs,
		MessageInfos:      file_upstream_proto_msgTypes,
	}.Build()
	File_upstream_proto = out.File
	file_upstream_proto_rawDesc = nil
	file_upstream_proto_goTypes = nil
	file_upstream_proto_depIdxs = nil
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.12.3
// source: upstream.proto

package apisix

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// [#protodoc-title: The Apache APISIX Upstream Health Check configuration]
type HealthCheck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *HealthCheck) Reset() {
	*x = HealthCheck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_upstream_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthCheck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheck) ProtoMessage() {}

func (x *HealthCheck) ProtoReflect() protoreflect.Message {
	mi := &file_upstream_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheck.ProtoReflect.Descriptor instead.
func (*HealthCheck) Descriptor() ([]byte, []int) {
	return file_upstream_proto_rawDescGZIP(), []int{0}
}

// [#protodoc-title: The Apache APISIX Upstream configuration]
type Upstream struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// How many times a request can be retried while communicating to the upstream,
	// note request can be retried only if no bytes are sent to client.
	Retries int32 `protobuf:"varint,1,opt,name=retries,proto3" json:"retries,omitempty"`
	// Timeout settings for this upstream.
	Timeout *Upstream_Timeout `protobuf:"bytes,2,opt,name=timeout,proto3" json:"timeout,omitempty"`
	// The load balancing algorithm.
	Type string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	// The scope of hash key, this field is only in effective
	// if type is "chash".
	HashOn string `protobuf:"bytes,4,opt,name=hash_on,json=hashOn,proto3" json:"hash_on,omitempty"`
	// The hash key, this field is only in effective
	// if type is "chash".
	Key string `protobuf:"bytes,5,opt,name=key,proto3" json:"key,omitempty"`
	// The health check settings for this upstream.
	Check *HealthCheck `protobuf:"bytes,6,opt,name=check,proto3" json:"check,omitempty"`
	// The communication protocol to use.
	Scheme string `protobuf:"bytes,7,opt,name=scheme,proto3" json:"scheme,omitempty"`
	// The host passing strategy.
	PassHost string `protobuf:"bytes,8,opt,name=pass_host,json=passHost,proto3" json:"pass_host,omitempty"`
	// The HTTP Host header to use when sending requests to this upstream.
	UpstreamHost string `protobuf:"bytes,9,opt,name=upstream_host,json=upstreamHost,proto3" json:"upstream_host,omitempty"`
	// The upstream name, it's useful for the logging but it's not required.
	Name string `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
	// Textual descriptions used to describe the upstream use.
	Desc string `protobuf:"bytes,11,opt,name=desc,proto3" json:"desc,omitempty"`
	// The upstream id.
	UpstreamId *ID `protobuf:"bytes,12,opt,name=upstream_id,json=upstreamId,proto3" json:"upstream_id,omitempty"`
}

func (x *Upstream) Reset() {
	*x = Upstream{}
	if protoimpl.UnsafeEnabled {
		mi := &file_upstream_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Upstream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Upstream) ProtoMessage() {}

func (x *Upstream) ProtoReflect() protoreflect.Message {
	mi := &file_upstream_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Upstream.ProtoReflect.Descriptor instead.
func (*Upstream) Descriptor() ([]byte, []int) {
	return file_upstream_proto_rawDescGZIP(), []int{1}
}

func (x *Upstream) GetRetries() int32 {
	if x != nil {
		return x.Retries
	}
	return 0
}

func (x *Upstream) GetTimeout() *Upstream_Timeout {
	if x != nil {
		return x.Timeout
	}
	return nil
}

func (x *Upstream) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Upstream) GetHashOn() string {
	if x != nil {
		return x.HashOn
	}
	return ""
}

func (x *Upstream) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Upstream) GetCheck() *HealthCheck {
	if x != nil {
		return x.Check
	}
	return nil
}

func (x *Upstream) GetScheme() string {
	if x != nil {
		return x.Scheme
	}
	return ""
}

func (x *Upstream) GetPassHost() string {
	if x != nil {
		return x.PassHost
	}
	return ""
}

func (x *Upstream) GetUpstreamHost() string {
	if x != nil {
		return x.UpstreamHost
	}
	return ""
}

func (x *Upstream) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Upstream) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *Upstream) GetUpstreamId() *ID {
	if x != nil {
		return x.UpstreamId
	}
	return nil
}

// Timeout settings about connecting, reading and sending with upstream.
type Upstream_Timeout struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The connect timeout setting (in seconds).
	Connect float64 `protobuf:"fixed64,1,opt,name=connect,proto3" json:"connect,omitempty"`
	// The send timeout setting (in seconds).
	Send float64 `protobuf:"fixed64,2,opt,name=send,proto3" json:"send,omitempty"`
	// The read timeout setting (in seconds).
	Read float64 `protobuf:"fixed64,3,opt,name=read,proto3" json:"read,omitempty"`
}

func (x *Upstream_Timeout) Reset() {
	*x = Upstream_Timeout{}
	if protoimpl.UnsafeEnabled {
		mi := &file_upstream_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Upstream_Timeout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Upstream_Timeout) ProtoMessage() {}

func (x *Upstream_Timeout) ProtoReflect() protoreflect.Message {
	mi := &file_upstream_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Upstream_Timeout.ProtoReflect.Descriptor instead.
func (*Upstream_Timeout) Descriptor() ([]byte, []int) {
	return file_upstream_proto_rawDescGZIP(), []int{1, 0}
}

func (x *Upstream_Timeout) GetConnect() float64 {
	if x != nil {
		return x.Connect
	}
	return 0
}

func (x *Upstream_Timeout) GetSend() float64 {
	if x != nil {
		return x.Send
	}
	return 0
}

func (x *Upstream_Timeout) GetRead() float64 {
	if x != nil {
		return x.Read
	}
	return 0
}

var File_upstream_proto protoreflect.FileDescriptor

var file_upstream_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x0d, 0x0a, 0x0b, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x22, 0xb6, 0x05, 0x0a, 0x08, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x12, 0x21, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x28, 0x00, 0x52, 0x07, 0x72, 0x65, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x12, 0x3e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x2a, 0xfa, 0x42, 0x27, 0x72, 0x25, 0x52, 0x05, 0x63, 0x68, 0x61, 0x73, 0x68, 0x52, 0x0a, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x52, 0x04, 0x65, 0x77, 0x6d, 0x61, 0x52,
	0x0a, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x50, 0x0a, 0x07, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x37, 0xfa, 0x42, 0x34, 0x72, 0x32, 0x52, 0x04, 0x76, 0x61, 0x72, 0x73, 0x52,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x52,
	0x08, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x52, 0x10, 0x76, 0x61, 0x72, 0x73, 0x5f,
	0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x68, 0x61, 0x73,
	0x68, 0x4f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x22, 0x0a, 0x05, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x52, 0x05, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x37, 0x0a, 0x06, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0xfa, 0x42, 0x1c, 0x72, 0x1a,
	0x52, 0x04, 0x67, 0x72, 0x70, 0x63, 0x52, 0x05, 0x67, 0x72, 0x70, 0x63, 0x73, 0x52, 0x04, 0x68,
	0x74, 0x74, 0x70, 0x52, 0x05, 0x68, 0x74, 0x74, 0x70, 0x73, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0xfa, 0x42, 0x17, 0x72, 0x15, 0x52, 0x04, 0x70, 0x61,
	0x73, 0x73, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x77, 0x72, 0x69, 0x74,
	0x65, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x0d, 0x75,
	0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x1b, 0xfa, 0x42, 0x18, 0x72, 0x16, 0x32, 0x14, 0x5e, 0x5c, 0x2a, 0x3f, 0x5b,
	0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x2e, 0x5f, 0x5d, 0x2b, 0x24, 0x52,
	0x0c, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06,
	0x72, 0x04, 0x10, 0x01, 0x18, 0x64, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x04,
	0x64, 0x65, 0x73, 0x63, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72,
	0x03, 0x18, 0x80, 0x02, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x24, 0x0a, 0x0b, 0x75, 0x70,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x03, 0x2e, 0x49, 0x44, 0x52, 0x0a, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64,
	0x1a, 0x7b, 0x0a, 0x07, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x28, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x42, 0x0e, 0xfa, 0x42,
	0x0b, 0x12, 0x09, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x52, 0x07, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0x22, 0x0a, 0x04, 0x73, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x42, 0x0e, 0xfa, 0x42, 0x0b, 0x12, 0x09, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x52, 0x04, 0x73, 0x65, 0x6e, 0x64, 0x12, 0x22, 0x0a, 0x04, 0x72, 0x65, 0x61,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x42, 0x0e, 0xfa, 0x42, 0x0b, 0x12, 0x09, 0x21, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x52, 0x04, 0x72, 0x65, 0x61, 0x64, 0x42, 0x0a, 0x5a,
	0x08, 0x2e, 0x3b, 0x61, 0x70, 0x69, 0x73, 0x69, 0x78, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_upstream_proto_rawDescOnce sync.Once
	file_upstream_proto_rawDescData = file_upstream_proto_rawDesc
)

func file_upstream_proto_rawDescGZIP() []byte {
	file_upstream_proto_rawDescOnce.Do(func() {
		file_upstream_proto_rawDescData = protoimpl.X.CompressGZIP(file_upstream_proto_rawDescData)
	})
	return file_upstream_proto_rawDescData
}

var file_upstream_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_upstream_proto_goTypes = []interface{}{
	(*HealthCheck)(nil),      // 0: HealthCheck
	(*Upstream)(nil),         // 1: Upstream
	(*Upstream_Timeout)(nil), // 2: Upstream.Timeout
	(*ID)(nil),               // 3: ID
}
var file_upstream_proto_depIdxs = []int32{
	2, // 0: Upstream.timeout:type_name -> Upstream.Timeout
	0, // 1: Upstream.check:type_name -> HealthCheck
	3, // 2: Upstream.upstream_id:type_name -> ID
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_upstream_proto_init() }
func file_upstream_proto_init() {
	if File_upstream_proto != nil {
		return
	}
	file_base_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_upstream_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthCheck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_upstream_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Upstream); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_upstream_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Upstream_Timeout); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_upstream_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_upstream_proto_goTypes,
		DependencyIndexes: file_upstream_proto_depIdxs,
		MessageInfos:      file_upstream_proto_msgTypes,
	}.Build()
	File_upstream_proto = out.File
	file_upstream_proto_rawDesc = nil
	file_upstream_proto_goTypes = nil
	file_upstream_proto_depIdxs = nil
}

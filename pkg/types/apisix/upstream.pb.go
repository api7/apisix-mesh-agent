// Code generated by protoc-gen-go. DO NOT EDIT.
// source: upstream.proto

package apisix

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/envoyproxy/protoc-gen-validate/validate"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// [#protodoc-title: The Apache APISIX Upstream Health Check configuration]
type HealthCheck struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HealthCheck) Reset()         { *m = HealthCheck{} }
func (m *HealthCheck) String() string { return proto.CompactTextString(m) }
func (*HealthCheck) ProtoMessage()    {}
func (*HealthCheck) Descriptor() ([]byte, []int) {
	return fileDescriptor_upstream_e7d662ad87bbe28c, []int{0}
}
func (m *HealthCheck) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HealthCheck.Unmarshal(m, b)
}
func (m *HealthCheck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HealthCheck.Marshal(b, m, deterministic)
}
func (dst *HealthCheck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealthCheck.Merge(dst, src)
}
func (m *HealthCheck) XXX_Size() int {
	return xxx_messageInfo_HealthCheck.Size(m)
}
func (m *HealthCheck) XXX_DiscardUnknown() {
	xxx_messageInfo_HealthCheck.DiscardUnknown(m)
}

var xxx_messageInfo_HealthCheck proto.InternalMessageInfo

// [#protodoc-title: The Apache APISIX Upstream configuration]
type Upstream struct {
	// How many times a request can be retried while communicating to the upstream,
	// note request can be retried only if no bytes are sent to client.
	Retries int32 `protobuf:"varint,1,opt,name=retries,proto3" json:"retries,omitempty"`
	// Timeout settings for this upstream.
	Timeout *Upstream_Timeout `protobuf:"bytes,2,opt,name=timeout,proto3" json:"timeout,omitempty"`
	// The load balancing algorithm.
	Type string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	// The scope of hash key, this field is only in effective
	// if type is "chash".
	HashOn string `protobuf:"bytes,4,opt,name=hash_on,json=hashOn,proto3" json:"hash_on,omitempty"`
	// The hash key, this field is only in effective
	// if type is "chash".
	Key string `protobuf:"bytes,5,opt,name=key,proto3" json:"key,omitempty"`
	// The health check settings for this upstream.
	Check *HealthCheck `protobuf:"bytes,6,opt,name=check,proto3" json:"check,omitempty"`
	// The communication protocol to use.
	Scheme string `protobuf:"bytes,7,opt,name=scheme,proto3" json:"scheme,omitempty"`
	// The host passing strategy.
	PassHost string `protobuf:"bytes,8,opt,name=pass_host,json=passHost,proto3" json:"pass_host,omitempty"`
	// The HTTP Host header to use when sending requests to this upstream.
	UpstreamHost string `protobuf:"bytes,9,opt,name=upstream_host,json=upstreamHost,proto3" json:"upstream_host,omitempty"`
	// The upstream name, it's useful for the logging but it's not required.
	Name string `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
	// Textual descriptions used to describe the upstream use.
	Desc string `protobuf:"bytes,11,opt,name=desc,proto3" json:"desc,omitempty"`
	// The upstream id.
	UpstreamId           *ID      `protobuf:"bytes,12,opt,name=upstream_id,json=upstreamId,proto3" json:"upstream_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Upstream) Reset()         { *m = Upstream{} }
func (m *Upstream) String() string { return proto.CompactTextString(m) }
func (*Upstream) ProtoMessage()    {}
func (*Upstream) Descriptor() ([]byte, []int) {
	return fileDescriptor_upstream_e7d662ad87bbe28c, []int{1}
}
func (m *Upstream) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Upstream.Unmarshal(m, b)
}
func (m *Upstream) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Upstream.Marshal(b, m, deterministic)
}
func (dst *Upstream) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Upstream.Merge(dst, src)
}
func (m *Upstream) XXX_Size() int {
	return xxx_messageInfo_Upstream.Size(m)
}
func (m *Upstream) XXX_DiscardUnknown() {
	xxx_messageInfo_Upstream.DiscardUnknown(m)
}

var xxx_messageInfo_Upstream proto.InternalMessageInfo

func (m *Upstream) GetRetries() int32 {
	if m != nil {
		return m.Retries
	}
	return 0
}

func (m *Upstream) GetTimeout() *Upstream_Timeout {
	if m != nil {
		return m.Timeout
	}
	return nil
}

func (m *Upstream) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Upstream) GetHashOn() string {
	if m != nil {
		return m.HashOn
	}
	return ""
}

func (m *Upstream) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Upstream) GetCheck() *HealthCheck {
	if m != nil {
		return m.Check
	}
	return nil
}

func (m *Upstream) GetScheme() string {
	if m != nil {
		return m.Scheme
	}
	return ""
}

func (m *Upstream) GetPassHost() string {
	if m != nil {
		return m.PassHost
	}
	return ""
}

func (m *Upstream) GetUpstreamHost() string {
	if m != nil {
		return m.UpstreamHost
	}
	return ""
}

func (m *Upstream) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Upstream) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *Upstream) GetUpstreamId() *ID {
	if m != nil {
		return m.UpstreamId
	}
	return nil
}

// Timeout settings about connecting, reading and sending with upstream.
type Upstream_Timeout struct {
	// The connect timeout setting (in seconds).
	Connect float64 `protobuf:"fixed64,1,opt,name=connect,proto3" json:"connect,omitempty"`
	// The send timeout setting (in seconds).
	Send float64 `protobuf:"fixed64,2,opt,name=send,proto3" json:"send,omitempty"`
	// The read timeout setting (in seconds).
	Read                 float64  `protobuf:"fixed64,3,opt,name=read,proto3" json:"read,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Upstream_Timeout) Reset()         { *m = Upstream_Timeout{} }
func (m *Upstream_Timeout) String() string { return proto.CompactTextString(m) }
func (*Upstream_Timeout) ProtoMessage()    {}
func (*Upstream_Timeout) Descriptor() ([]byte, []int) {
	return fileDescriptor_upstream_e7d662ad87bbe28c, []int{1, 0}
}
func (m *Upstream_Timeout) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Upstream_Timeout.Unmarshal(m, b)
}
func (m *Upstream_Timeout) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Upstream_Timeout.Marshal(b, m, deterministic)
}
func (dst *Upstream_Timeout) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Upstream_Timeout.Merge(dst, src)
}
func (m *Upstream_Timeout) XXX_Size() int {
	return xxx_messageInfo_Upstream_Timeout.Size(m)
}
func (m *Upstream_Timeout) XXX_DiscardUnknown() {
	xxx_messageInfo_Upstream_Timeout.DiscardUnknown(m)
}

var xxx_messageInfo_Upstream_Timeout proto.InternalMessageInfo

func (m *Upstream_Timeout) GetConnect() float64 {
	if m != nil {
		return m.Connect
	}
	return 0
}

func (m *Upstream_Timeout) GetSend() float64 {
	if m != nil {
		return m.Send
	}
	return 0
}

func (m *Upstream_Timeout) GetRead() float64 {
	if m != nil {
		return m.Read
	}
	return 0
}

func init() {
	proto.RegisterType((*HealthCheck)(nil), "HealthCheck")
	proto.RegisterType((*Upstream)(nil), "Upstream")
	proto.RegisterType((*Upstream_Timeout)(nil), "Upstream.Timeout")
}

func init() { proto.RegisterFile("upstream.proto", fileDescriptor_upstream_e7d662ad87bbe28c) }

var fileDescriptor_upstream_e7d662ad87bbe28c = []byte{
	// 526 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x52, 0x4b, 0x6f, 0xd3, 0x4e,
	0x10, 0x6f, 0x9a, 0xf5, 0x23, 0x9b, 0xb6, 0xea, 0x7f, 0xf5, 0x87, 0xae, 0x42, 0x11, 0x6d, 0x54,
	0x44, 0xd4, 0x2a, 0x06, 0x15, 0xa4, 0x8a, 0x0b, 0x8f, 0x85, 0x43, 0x7b, 0x02, 0x8d, 0xe0, 0x52,
	0x1e, 0xd1, 0xc6, 0x1e, 0x61, 0xab, 0xf5, 0xae, 0xb5, 0xbb, 0x69, 0x29, 0x5c, 0xf8, 0x54, 0x7c,
	0x38, 0x9f, 0xd0, 0x6e, 0x62, 0x84, 0x04, 0x3e, 0x8c, 0x46, 0xbf, 0x97, 0xed, 0x99, 0xa1, 0x5b,
	0x8b, 0xc6, 0x3a, 0x83, 0xb2, 0xce, 0x1a, 0xa3, 0x9d, 0x1e, 0xd1, 0xb9, 0xb4, 0xb8, 0xea, 0x77,
	0xae, 0xe4, 0x65, 0x55, 0x48, 0x87, 0x0f, 0xbb, 0x66, 0x49, 0x8c, 0x37, 0xe9, 0xf0, 0x14, 0xe5,
	0xa5, 0x2b, 0x5f, 0x95, 0x98, 0x5f, 0x8c, 0x7f, 0x46, 0x34, 0x7d, 0xbf, 0x8a, 0x61, 0xfb, 0x34,
	0x31, 0xe8, 0x4c, 0x85, 0x96, 0xf7, 0xf6, 0x7a, 0x93, 0x48, 0x24, 0xad, 0x20, 0xa3, 0xf5, 0xc9,
	0x1a, 0x74, 0x38, 0x3b, 0xa2, 0x89, 0xab, 0x6a, 0xd4, 0x0b, 0xc7, 0xd7, 0xf7, 0x7a, 0x93, 0xe1,
	0xf1, 0x7f, 0x59, 0x67, 0xcf, 0xde, 0x2d, 0x09, 0xe8, 0x14, 0xec, 0x19, 0x25, 0xee, 0xa6, 0x41,
	0xde, 0xdf, 0xeb, 0x4d, 0x06, 0xe2, 0xb0, 0x15, 0x0f, 0xcc, 0x7d, 0x88, 0xf2, 0x52, 0xda, 0x12,
	0xa8, 0xd1, 0x0b, 0x55, 0x18, 0x3d, 0xaf, 0x14, 0x10, 0xbc, 0xae, 0x25, 0xd0, 0x4b, 0x94, 0x16,
	0x67, 0xb9, 0x56, 0x0a, 0x82, 0x8f, 0xbd, 0xa5, 0x89, 0xd7, 0xce, 0xb4, 0xe2, 0x24, 0x44, 0x9c,
	0xb4, 0xe2, 0x89, 0x39, 0x06, 0x72, 0x25, 0x8d, 0x85, 0xb8, 0x44, 0x59, 0xa0, 0x81, 0x38, 0xd7,
	0xfa, 0xa2, 0x42, 0x48, 0x73, 0xad, 0xec, 0xa2, 0x46, 0x03, 0xdb, 0x9e, 0x9f, 0xe5, 0xba, 0x9e,
	0x57, 0x4a, 0xba, 0x4a, 0x2b, 0x88, 0x7d, 0xce, 0x1b, 0xc5, 0xb6, 0x69, 0xff, 0x02, 0x6f, 0x78,
	0xe4, 0xd3, 0xc0, 0xb7, 0x6c, 0x4c, 0xa3, 0xdc, 0x4f, 0x82, 0xc7, 0xe1, 0x77, 0x36, 0xb2, 0x3f,
	0xa6, 0x03, 0x4b, 0x8a, 0x9d, 0xd0, 0xd8, 0xe6, 0x25, 0xd6, 0xc8, 0x93, 0xf0, 0x19, 0xf7, 0x5a,
	0xb1, 0x6b, 0x46, 0x40, 0xbe, 0x98, 0x26, 0x87, 0xc8, 0x57, 0x0b, 0xa4, 0x74, 0xae, 0x81, 0xc8,
	0x57, 0x0b, 0x2b, 0x39, 0x3b, 0xa1, 0x83, 0x46, 0x5a, 0x3b, 0x2b, 0xb5, 0x75, 0x3c, 0x0d, 0xde,
	0x51, 0x2b, 0x76, 0xcc, 0x2d, 0x20, 0x1e, 0x07, 0xa2, 0x74, 0x81, 0x7e, 0xb8, 0xd7, 0xa6, 0x72,
	0x08, 0xa9, 0x07, 0x4f, 0xb5, 0x75, 0xec, 0x05, 0xdd, 0xec, 0x96, 0xbb, 0x34, 0x0f, 0x82, 0xf9,
	0x4e, 0x2b, 0xb8, 0xb9, 0x7d, 0xfc, 0xff, 0xe7, 0x8f, 0x87, 0xcf, 0x3f, 0x3c, 0x9a, 0x3e, 0x95,
	0xd3, 0x6f, 0x2f, 0xa7, 0xe7, 0xd3, 0x6c, 0xf6, 0xe9, 0xe8, 0x00, 0x36, 0x3a, 0x47, 0x48, 0xb8,
	0x4b, 0x89, 0x92, 0x35, 0x72, 0x1a, 0x8c, 0x83, 0x56, 0xc4, 0x86, 0x6c, 0xf7, 0x78, 0x01, 0x01,
	0x66, 0xbb, 0x94, 0x14, 0x68, 0x73, 0x3e, 0x0c, 0x74, 0xda, 0x8a, 0xc8, 0xf4, 0xf9, 0x8f, 0x75,
	0x08, 0x28, 0x3b, 0xa0, 0xc3, 0xdf, 0xaf, 0xaf, 0x0a, 0xbe, 0x11, 0x46, 0xd3, 0xcf, 0xce, 0x5e,
	0x03, 0xed, 0xf0, 0xb3, 0x62, 0xf4, 0x9d, 0x26, 0xab, 0x95, 0xb3, 0x09, 0x4d, 0xfc, 0xde, 0x30,
	0x77, 0xe1, 0x72, 0x7a, 0x62, 0xab, 0x15, 0x43, 0x36, 0xd8, 0x5f, 0x5b, 0x3d, 0xd0, 0xd1, 0x6c,
	0x4c, 0x89, 0x45, 0x55, 0x84, 0xeb, 0xf9, 0x5b, 0x16, 0x38, 0xaf, 0x31, 0x28, 0x8b, 0x70, 0x37,
	0xff, 0xd0, 0x78, 0x4e, 0xa4, 0xe7, 0xb1, 0x6c, 0x2a, 0x5b, 0x7d, 0x9d, 0xc7, 0xe1, 0xb0, 0x1f,
	0xff, 0x0a, 0x00, 0x00, 0xff, 0xff, 0x03, 0x2e, 0x1e, 0x7b, 0x0f, 0x03, 0x00, 0x00,
}

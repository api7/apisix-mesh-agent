// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/route.proto

package apisix

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/envoyproxy/protoc-gen-validate/validate"
import any "github.com/golang/protobuf/ptypes/any"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// RouteStatus Enumerations.
type Route_RouteStatus int32

const (
	Route_Disable Route_RouteStatus = 0
	Route_Enable  Route_RouteStatus = 1
)

var Route_RouteStatus_name = map[int32]string{
	0: "Disable",
	1: "Enable",
}
var Route_RouteStatus_value = map[string]int32{
	"Disable": 0,
	"Enable":  1,
}

func (x Route_RouteStatus) String() string {
	return proto.EnumName(Route_RouteStatus_name, int32(x))
}
func (Route_RouteStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_route_3c543d879728f081, []int{1, 0}
}

// ID used to identify resources like Route, Upstream.
type ID struct {
	// Types that are valid to be assigned to OneofId:
	//	*ID_IntVal
	//	*ID_StrVal
	OneofId              isID_OneofId `protobuf_oneof:"oneof_id"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *ID) Reset()         { *m = ID{} }
func (m *ID) String() string { return proto.CompactTextString(m) }
func (*ID) ProtoMessage()    {}
func (*ID) Descriptor() ([]byte, []int) {
	return fileDescriptor_route_3c543d879728f081, []int{0}
}
func (m *ID) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ID.Unmarshal(m, b)
}
func (m *ID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ID.Marshal(b, m, deterministic)
}
func (dst *ID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ID.Merge(dst, src)
}
func (m *ID) XXX_Size() int {
	return xxx_messageInfo_ID.Size(m)
}
func (m *ID) XXX_DiscardUnknown() {
	xxx_messageInfo_ID.DiscardUnknown(m)
}

var xxx_messageInfo_ID proto.InternalMessageInfo

type isID_OneofId interface {
	isID_OneofId()
}

type ID_IntVal struct {
	IntVal int64 `protobuf:"varint,1,opt,name=int_val,json=intVal,proto3,oneof"`
}

type ID_StrVal struct {
	StrVal string `protobuf:"bytes,2,opt,name=str_val,json=strVal,proto3,oneof"`
}

func (*ID_IntVal) isID_OneofId() {}

func (*ID_StrVal) isID_OneofId() {}

func (m *ID) GetOneofId() isID_OneofId {
	if m != nil {
		return m.OneofId
	}
	return nil
}

func (m *ID) GetIntVal() int64 {
	if x, ok := m.GetOneofId().(*ID_IntVal); ok {
		return x.IntVal
	}
	return 0
}

func (m *ID) GetStrVal() string {
	if x, ok := m.GetOneofId().(*ID_StrVal); ok {
		return x.StrVal
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ID) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ID_OneofMarshaler, _ID_OneofUnmarshaler, _ID_OneofSizer, []interface{}{
		(*ID_IntVal)(nil),
		(*ID_StrVal)(nil),
	}
}

func _ID_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ID)
	// oneof_id
	switch x := m.OneofId.(type) {
	case *ID_IntVal:
		b.EncodeVarint(1<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.IntVal))
	case *ID_StrVal:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.StrVal)
	case nil:
	default:
		return fmt.Errorf("ID.OneofId has unexpected type %T", x)
	}
	return nil
}

func _ID_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ID)
	switch tag {
	case 1: // oneof_id.int_val
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.OneofId = &ID_IntVal{int64(x)}
		return true, err
	case 2: // oneof_id.str_val
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.OneofId = &ID_StrVal{x}
		return true, err
	default:
		return false, nil
	}
}

func _ID_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ID)
	// oneof_id
	switch x := m.OneofId.(type) {
	case *ID_IntVal:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(x.IntVal))
	case *ID_StrVal:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.StrVal)))
		n += len(x.StrVal)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// [#protodoc-title: The Apache APISIX Route configuration]
type Route struct {
	// URI array used to do the route match.
	// At least one item should be configured and each of them cannot be
	// duplicated.
	Uris []string `protobuf:"bytes,1,rep,name=uris,proto3" json:"uris,omitempty"`
	// The route name, it's useful for the logging but it's not required.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The route id, can be an int64 value or a string matching the specific pattern.
	Id *ID `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	// Textual descriptions used to describe the route use.
	Desc string `protobuf:"bytes,4,opt,name=desc,proto3" json:"desc,omitempty"`
	// Priority of this route, used to decide which route should be used when
	// multiple routes contains same URI.
	// Larger value means higher priority. The default value is 0.
	Priority int32 `protobuf:"varint,5,opt,name=priority,proto3" json:"priority,omitempty"`
	// HTTP Methods used to do the route match.
	Methods []string `protobuf:"bytes,6,rep,name=methods,proto3" json:"methods,omitempty"`
	// Host array used to do the route match.
	Hosts []string `protobuf:"bytes,7,rep,name=hosts,proto3" json:"hosts,omitempty"`
	// Remote address array used to do the route match.
	RemoteAddrs []string `protobuf:"bytes,8,rep,name=remote_addrs,json=remoteAddrs,proto3" json:"remote_addrs,omitempty"`
	// Nginx vars used to do the route match.
	Vars []string `protobuf:"bytes,9,rep,name=vars,proto3" json:"vars,omitempty"`
	// Embedded plugins.
	Plugins *any.Any `protobuf:"bytes,10,opt,name=plugins,proto3" json:"plugins,omitempty"`
	// The referred service id.
	ServiceId *ID `protobuf:"bytes,11,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	// The referred upstream id.
	UpstreamId *ID `protobuf:"bytes,12,opt,name=upstream_id,json=upstreamId,proto3" json:"upstream_id,omitempty"`
	// The route status.
	Status               Route_RouteStatus `protobuf:"varint,13,opt,name=status,proto3,enum=Route_RouteStatus" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Route) Reset()         { *m = Route{} }
func (m *Route) String() string { return proto.CompactTextString(m) }
func (*Route) ProtoMessage()    {}
func (*Route) Descriptor() ([]byte, []int) {
	return fileDescriptor_route_3c543d879728f081, []int{1}
}
func (m *Route) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Route.Unmarshal(m, b)
}
func (m *Route) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Route.Marshal(b, m, deterministic)
}
func (dst *Route) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Route.Merge(dst, src)
}
func (m *Route) XXX_Size() int {
	return xxx_messageInfo_Route.Size(m)
}
func (m *Route) XXX_DiscardUnknown() {
	xxx_messageInfo_Route.DiscardUnknown(m)
}

var xxx_messageInfo_Route proto.InternalMessageInfo

func (m *Route) GetUris() []string {
	if m != nil {
		return m.Uris
	}
	return nil
}

func (m *Route) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Route) GetId() *ID {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Route) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *Route) GetPriority() int32 {
	if m != nil {
		return m.Priority
	}
	return 0
}

func (m *Route) GetMethods() []string {
	if m != nil {
		return m.Methods
	}
	return nil
}

func (m *Route) GetHosts() []string {
	if m != nil {
		return m.Hosts
	}
	return nil
}

func (m *Route) GetRemoteAddrs() []string {
	if m != nil {
		return m.RemoteAddrs
	}
	return nil
}

func (m *Route) GetVars() []string {
	if m != nil {
		return m.Vars
	}
	return nil
}

func (m *Route) GetPlugins() *any.Any {
	if m != nil {
		return m.Plugins
	}
	return nil
}

func (m *Route) GetServiceId() *ID {
	if m != nil {
		return m.ServiceId
	}
	return nil
}

func (m *Route) GetUpstreamId() *ID {
	if m != nil {
		return m.UpstreamId
	}
	return nil
}

func (m *Route) GetStatus() Route_RouteStatus {
	if m != nil {
		return m.Status
	}
	return Route_Disable
}

func init() {
	proto.RegisterType((*ID)(nil), "ID")
	proto.RegisterType((*Route)(nil), "Route")
	proto.RegisterEnum("Route_RouteStatus", Route_RouteStatus_name, Route_RouteStatus_value)
}

func init() { proto.RegisterFile("api/route.proto", fileDescriptor_route_3c543d879728f081) }

var fileDescriptor_route_3c543d879728f081 = []byte{
	// 593 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x92, 0x5d, 0x4f, 0xdb, 0x3c,
	0x14, 0xc7, 0x71, 0x9a, 0x97, 0xf6, 0x94, 0xe7, 0x59, 0xe7, 0xa1, 0x61, 0x10, 0x4c, 0x55, 0x84,
	0xa6, 0x08, 0xd6, 0x14, 0x75, 0x17, 0x13, 0x37, 0x1b, 0x75, 0x1b, 0x8d, 0x4a, 0x13, 0xad, 0x4c,
	0xc6, 0x05, 0x0c, 0x2a, 0x43, 0x02, 0x78, 0x4a, 0x93, 0xca, 0x4e, 0xab, 0xb1, 0xab, 0x7d, 0x86,
	0x7e, 0xc6, 0x7d, 0x8a, 0x5c, 0x4d, 0x75, 0xdb, 0xc1, 0x6e, 0x22, 0xfb, 0x7f, 0x7e, 0xe7, 0x25,
	0x7f, 0x1f, 0x78, 0xc1, 0xc7, 0xa2, 0x29, 0xb3, 0x49, 0x1e, 0xfb, 0x63, 0x99, 0xe5, 0xd9, 0xf6,
	0xe6, 0x94, 0x27, 0x22, 0xe2, 0x79, 0xdc, 0x5c, 0x1d, 0x96, 0x81, 0xad, 0xfb, 0x2c, 0xbb, 0x4f,
	0xe2, 0xa6, 0xbe, 0xdd, 0x4c, 0xee, 0x9a, 0x3c, 0x7d, 0x5c, 0x84, 0xdc, 0x11, 0x18, 0xbd, 0x2e,
	0x76, 0xc1, 0x11, 0x69, 0x3e, 0x9c, 0xf2, 0x84, 0xa0, 0x3a, 0xf2, 0x4a, 0xd4, 0x29, 0xa8, 0xe9,
	0x1a, 0x1e, 0x3a, 0x59, 0x63, 0xb6, 0x48, 0xf3, 0x73, 0x9e, 0xe0, 0x0f, 0xe0, 0xa8, 0x5c, 0x6a,
	0xc6, 0xa8, 0x23, 0xaf, 0x42, 0x77, 0x0a, 0xba, 0x25, 0x37, 0x6b, 0x88, 0x1c, 0xb7, 0x5e, 0x5e,
	0x5f, 0xf2, 0xc6, 0xcf, 0x76, 0xe3, 0xe2, 0xb0, 0x71, 0xd4, 0x18, 0xfa, 0x57, 0x07, 0x7b, 0xf3,
	0x44, 0x95, 0xcb, 0x73, 0x9e, 0x50, 0x80, 0x72, 0x96, 0xc6, 0xd9, 0xdd, 0x50, 0x44, 0xee, 0x6f,
	0x13, 0x2c, 0x36, 0x1f, 0x19, 0xbf, 0x01, 0x73, 0x22, 0x85, 0x22, 0xa8, 0x5e, 0xf2, 0x2a, 0x14,
	0x0a, 0xea, 0xcc, 0x90, 0x59, 0x46, 0x04, 0x31, 0xad, 0xe3, 0x5d, 0x30, 0x53, 0x3e, 0x8a, 0x97,
	0xbd, 0x2a, 0x05, 0xb5, 0xa5, 0x59, 0x43, 0x24, 0x62, 0x5a, 0xc6, 0xaf, 0xc0, 0x10, 0x11, 0x29,
	0xd5, 0x91, 0x57, 0x6d, 0x95, 0xfc, 0x5e, 0x97, 0x19, 0x22, 0xc2, 0x3b, 0x60, 0x46, 0xb1, 0xba,
	0x25, 0xa6, 0xce, 0x29, 0x17, 0xd4, 0x92, 0x25, 0xf2, 0xcb, 0x60, 0x5a, 0xc5, 0xdb, 0x50, 0x1e,
	0x4b, 0x91, 0x49, 0x91, 0x3f, 0x12, 0xab, 0x8e, 0x3c, 0x8b, 0xfd, 0xbd, 0xe3, 0xef, 0xe0, 0x8c,
	0xe2, 0xfc, 0x21, 0x8b, 0x14, 0xb1, 0xf5, 0x40, 0x83, 0x82, 0x5a, 0x33, 0x64, 0x10, 0x54, 0xd0,
	0x60, 0x86, 0xa8, 0x7b, 0x2c, 0x3f, 0xb2, 0xd2, 0xe7, 0x20, 0x64, 0xe6, 0xa0, 0x7f, 0x16, 0xb2,
	0xd2, 0xe0, 0x6b, 0xc8, 0xec, 0x6e, 0xf0, 0x25, 0x08, 0x03, 0x66, 0x0d, 0xda, 0x61, 0xe7, 0x84,
	0x99, 0x27, 0x41, 0xbb, 0xcb, 0x9c, 0xfe, 0x20, 0xec, 0xf5, 0x4f, 0xcf, 0x98, 0xd3, 0xe9, 0x9f,
	0x9e, 0x06, 0x9d, 0x90, 0x59, 0x21, 0x6b, 0x77, 0x02, 0xb6, 0x6a, 0x80, 0x29, 0x58, 0x0f, 0x99,
	0xca, 0x15, 0x71, 0x74, 0xa7, 0x77, 0x05, 0xad, 0xcc, 0x90, 0x3d, 0xff, 0x75, 0x0f, 0x15, 0x74,
	0x77, 0x86, 0xb6, 0x5d, 0x22, 0x5f, 0xb7, 0x36, 0xae, 0xbf, 0xed, 0x7f, 0xba, 0x3c, 0x6c, 0x1c,
	0x2d, 0x9c, 0x6d, 0xf8, 0xc3, 0xab, 0x83, 0x3d, 0xb6, 0x48, 0xc5, 0x4d, 0x58, 0x97, 0xf1, 0x28,
	0xcb, 0xe3, 0x21, 0x8f, 0x22, 0xa9, 0x48, 0x59, 0x97, 0x5a, 0x7f, 0x5e, 0x8a, 0x55, 0x17, 0x44,
	0x7b, 0x0e, 0xcc, 0xed, 0x9e, 0x72, 0xa9, 0x48, 0xe5, 0x1f, 0xbb, 0x8d, 0x9a, 0xc9, 0xb4, 0x8e,
	0x7d, 0x70, 0xc6, 0xc9, 0xe4, 0x5e, 0xa4, 0x8a, 0x80, 0x36, 0x75, 0xc3, 0x5f, 0x2c, 0x8d, 0xbf,
	0x5a, 0x1a, 0xbf, 0x9d, 0x3e, 0xb2, 0x15, 0x84, 0x5d, 0x00, 0x15, 0xcb, 0xa9, 0xb8, 0x8d, 0x87,
	0x22, 0x22, 0xd5, 0xa7, 0x77, 0xa8, 0x2c, 0xe5, 0x5e, 0x84, 0xf7, 0xa0, 0x3a, 0x19, 0xab, 0x5c,
	0xc6, 0x7c, 0x34, 0x87, 0xd6, 0x9f, 0x20, 0x58, 0xe9, 0xbd, 0x08, 0xef, 0x83, 0xad, 0x72, 0x9e,
	0x4f, 0x14, 0xf9, 0xaf, 0x8e, 0xbc, 0xff, 0x5b, 0xd8, 0xd7, 0x0b, 0xb2, 0xf8, 0x9e, 0xe9, 0x08,
	0x5b, 0x12, 0xee, 0x5b, 0xa8, 0x3e, 0x93, 0x71, 0x15, 0x9c, 0xae, 0x50, 0xfc, 0x26, 0x89, 0x6b,
	0x6b, 0x18, 0xc0, 0x0e, 0x52, 0x7d, 0x46, 0xb4, 0x7c, 0x61, 0xf3, 0xb1, 0x50, 0xe2, 0xc7, 0x8d,
	0xad, 0xc7, 0x7f, 0xff, 0x27, 0x00, 0x00, 0xff, 0xff, 0xc2, 0x38, 0xae, 0x1e, 0x2d, 0x03, 0x00,
	0x00,
}

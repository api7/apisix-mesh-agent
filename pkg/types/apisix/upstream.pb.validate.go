// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: upstream.proto

package apisix

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on Upstream with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Upstream) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Upstream with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpstreamMultiError, or nil
// if none found.
func (m *Upstream) ValidateAll() error {
	return m.validate(true)
}

func (m *Upstream) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetRetries() < 0 {
		err := UpstreamValidationError{
			field:  "Retries",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetTimeout()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpstreamValidationError{
					field:  "Timeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpstreamValidationError{
					field:  "Timeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimeout()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpstreamValidationError{
				field:  "Timeout",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if _, ok := _Upstream_Type_InLookup[m.GetType()]; !ok {
		err := UpstreamValidationError{
			field:  "Type",
			reason: "value must be in list [chash roundrobin ewma lease_conn]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _Upstream_HashOn_InLookup[m.GetHashOn()]; !ok {
		err := UpstreamValidationError{
			field:  "HashOn",
			reason: "value must be in list [vars header cookie consumer vars_combination]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Key

	if all {
		switch v := interface{}(m.GetCheck()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpstreamValidationError{
					field:  "Check",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpstreamValidationError{
					field:  "Check",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCheck()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpstreamValidationError{
				field:  "Check",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if _, ok := _Upstream_Scheme_InLookup[m.GetScheme()]; !ok {
		err := UpstreamValidationError{
			field:  "Scheme",
			reason: "value must be in list [grpc grpcs http https]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _Upstream_PassHost_InLookup[m.GetPassHost()]; !ok {
		err := UpstreamValidationError{
			field:  "PassHost",
			reason: "value must be in list [pass node rewrite]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_Upstream_UpstreamHost_Pattern.MatchString(m.GetUpstreamHost()) {
		err := UpstreamValidationError{
			field:  "UpstreamHost",
			reason: "value does not match regex pattern \"^\\\\*?[0-9a-zA-Z-._]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 100 {
		err := UpstreamValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetDesc()) > 256 {
		err := UpstreamValidationError{
			field:  "Desc",
			reason: "value length must be at most 256 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Id

	for idx, item := range m.GetNodes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpstreamValidationError{
						field:  fmt.Sprintf("Nodes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpstreamValidationError{
						field:  fmt.Sprintf("Nodes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpstreamValidationError{
					field:  fmt.Sprintf("Nodes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UpstreamMultiError(errors)
	}
	return nil
}

// UpstreamMultiError is an error wrapping multiple validation errors returned
// by Upstream.ValidateAll() if the designated constraints aren't met.
type UpstreamMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpstreamMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpstreamMultiError) AllErrors() []error { return m }

// UpstreamValidationError is the validation error returned by
// Upstream.Validate if the designated constraints aren't met.
type UpstreamValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpstreamValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpstreamValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpstreamValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpstreamValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpstreamValidationError) ErrorName() string { return "UpstreamValidationError" }

// Error satisfies the builtin error interface
func (e UpstreamValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpstream.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpstreamValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpstreamValidationError{}

var _Upstream_Type_InLookup = map[string]struct{}{
	"chash":      {},
	"roundrobin": {},
	"ewma":       {},
	"lease_conn": {},
}

var _Upstream_HashOn_InLookup = map[string]struct{}{
	"vars":             {},
	"header":           {},
	"cookie":           {},
	"consumer":         {},
	"vars_combination": {},
}

var _Upstream_Scheme_InLookup = map[string]struct{}{
	"grpc":  {},
	"grpcs": {},
	"http":  {},
	"https": {},
}

var _Upstream_PassHost_InLookup = map[string]struct{}{
	"pass":    {},
	"node":    {},
	"rewrite": {},
}

var _Upstream_UpstreamHost_Pattern = regexp.MustCompile("^\\*?[0-9a-zA-Z-._]+$")

// Validate checks the field values on HealthCheck with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *HealthCheck) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HealthCheck with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in HealthCheckMultiError, or
// nil if none found.
func (m *HealthCheck) ValidateAll() error {
	return m.validate(true)
}

func (m *HealthCheck) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetActive() == nil {
		err := HealthCheckValidationError{
			field:  "Active",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetActive()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, HealthCheckValidationError{
					field:  "Active",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, HealthCheckValidationError{
					field:  "Active",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetActive()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return HealthCheckValidationError{
				field:  "Active",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPassive()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, HealthCheckValidationError{
					field:  "Passive",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, HealthCheckValidationError{
					field:  "Passive",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPassive()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return HealthCheckValidationError{
				field:  "Passive",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return HealthCheckMultiError(errors)
	}
	return nil
}

// HealthCheckMultiError is an error wrapping multiple validation errors
// returned by HealthCheck.ValidateAll() if the designated constraints aren't met.
type HealthCheckMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HealthCheckMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HealthCheckMultiError) AllErrors() []error { return m }

// HealthCheckValidationError is the validation error returned by
// HealthCheck.Validate if the designated constraints aren't met.
type HealthCheckValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HealthCheckValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HealthCheckValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HealthCheckValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HealthCheckValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HealthCheckValidationError) ErrorName() string { return "HealthCheckValidationError" }

// Error satisfies the builtin error interface
func (e HealthCheckValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHealthCheck.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HealthCheckValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HealthCheckValidationError{}

// Validate checks the field values on ActiveHealthCheck with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ActiveHealthCheck) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ActiveHealthCheck with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ActiveHealthCheckMultiError, or nil if none found.
func (m *ActiveHealthCheck) ValidateAll() error {
	return m.validate(true)
}

func (m *ActiveHealthCheck) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := _ActiveHealthCheck_Type_InLookup[m.GetType()]; !ok {
		err := ActiveHealthCheckValidationError{
			field:  "Type",
			reason: "value must be in list [http https tcp]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetTimeout() != 0 {

		if m.GetTimeout() < 0 {
			err := ActiveHealthCheckValidationError{
				field:  "Timeout",
				reason: "value must be greater than or equal to 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetConcurrency() != 0 {

		if m.GetConcurrency() < 0 {
			err := ActiveHealthCheckValidationError{
				field:  "Concurrency",
				reason: "value must be greater than or equal to 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if !_ActiveHealthCheck_Host_Pattern.MatchString(m.GetHost()) {
		err := ActiveHealthCheckValidationError{
			field:  "Host",
			reason: "value does not match regex pattern \"^\\\\*?[0-9a-zA-Z-._]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPort(); val < 1 || val > 65535 {
		err := ActiveHealthCheckValidationError{
			field:  "Port",
			reason: "value must be inside range [1, 65535]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetHttpPath() != "" {

	}

	// no validation rules for HttpsVerifyCertificate

	if all {
		switch v := interface{}(m.GetHealthy()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ActiveHealthCheckValidationError{
					field:  "Healthy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ActiveHealthCheckValidationError{
					field:  "Healthy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHealthy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ActiveHealthCheckValidationError{
				field:  "Healthy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUnhealthy()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ActiveHealthCheckValidationError{
					field:  "Unhealthy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ActiveHealthCheckValidationError{
					field:  "Unhealthy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUnhealthy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ActiveHealthCheckValidationError{
				field:  "Unhealthy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(m.GetReqHeaders()) > 0 {

		if len(m.GetReqHeaders()) < 1 {
			err := ActiveHealthCheckValidationError{
				field:  "ReqHeaders",
				reason: "value must contain at least 1 item(s)",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		_ActiveHealthCheck_ReqHeaders_Unique := make(map[string]struct{}, len(m.GetReqHeaders()))

		for idx, item := range m.GetReqHeaders() {
			_, _ = idx, item

			if _, exists := _ActiveHealthCheck_ReqHeaders_Unique[item]; exists {
				err := ActiveHealthCheckValidationError{
					field:  fmt.Sprintf("ReqHeaders[%v]", idx),
					reason: "repeated value must contain unique items",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			} else {
				_ActiveHealthCheck_ReqHeaders_Unique[item] = struct{}{}
			}

			// no validation rules for ReqHeaders[idx]
		}

	}

	if len(errors) > 0 {
		return ActiveHealthCheckMultiError(errors)
	}
	return nil
}

// ActiveHealthCheckMultiError is an error wrapping multiple validation errors
// returned by ActiveHealthCheck.ValidateAll() if the designated constraints
// aren't met.
type ActiveHealthCheckMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ActiveHealthCheckMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ActiveHealthCheckMultiError) AllErrors() []error { return m }

// ActiveHealthCheckValidationError is the validation error returned by
// ActiveHealthCheck.Validate if the designated constraints aren't met.
type ActiveHealthCheckValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ActiveHealthCheckValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ActiveHealthCheckValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ActiveHealthCheckValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ActiveHealthCheckValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ActiveHealthCheckValidationError) ErrorName() string {
	return "ActiveHealthCheckValidationError"
}

// Error satisfies the builtin error interface
func (e ActiveHealthCheckValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sActiveHealthCheck.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ActiveHealthCheckValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ActiveHealthCheckValidationError{}

var _ActiveHealthCheck_Type_InLookup = map[string]struct{}{
	"http":  {},
	"https": {},
	"tcp":   {},
}

var _ActiveHealthCheck_Host_Pattern = regexp.MustCompile("^\\*?[0-9a-zA-Z-._]+$")

// Validate checks the field values on PassiveHealthCheck with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PassiveHealthCheck) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PassiveHealthCheck with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PassiveHealthCheckMultiError, or nil if none found.
func (m *PassiveHealthCheck) ValidateAll() error {
	return m.validate(true)
}

func (m *PassiveHealthCheck) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := _PassiveHealthCheck_Type_InLookup[m.GetType()]; !ok {
		err := PassiveHealthCheckValidationError{
			field:  "Type",
			reason: "value must be in list [http https tcp]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetHealthy()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PassiveHealthCheckValidationError{
					field:  "Healthy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PassiveHealthCheckValidationError{
					field:  "Healthy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHealthy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PassiveHealthCheckValidationError{
				field:  "Healthy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUnhealthy()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PassiveHealthCheckValidationError{
					field:  "Unhealthy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PassiveHealthCheckValidationError{
					field:  "Unhealthy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUnhealthy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PassiveHealthCheckValidationError{
				field:  "Unhealthy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PassiveHealthCheckMultiError(errors)
	}
	return nil
}

// PassiveHealthCheckMultiError is an error wrapping multiple validation errors
// returned by PassiveHealthCheck.ValidateAll() if the designated constraints
// aren't met.
type PassiveHealthCheckMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PassiveHealthCheckMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PassiveHealthCheckMultiError) AllErrors() []error { return m }

// PassiveHealthCheckValidationError is the validation error returned by
// PassiveHealthCheck.Validate if the designated constraints aren't met.
type PassiveHealthCheckValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PassiveHealthCheckValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PassiveHealthCheckValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PassiveHealthCheckValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PassiveHealthCheckValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PassiveHealthCheckValidationError) ErrorName() string {
	return "PassiveHealthCheckValidationError"
}

// Error satisfies the builtin error interface
func (e PassiveHealthCheckValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPassiveHealthCheck.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PassiveHealthCheckValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PassiveHealthCheckValidationError{}

var _PassiveHealthCheck_Type_InLookup = map[string]struct{}{
	"http":  {},
	"https": {},
	"tcp":   {},
}

// Validate checks the field values on ActiveHealthCheckHealthy with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ActiveHealthCheckHealthy) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ActiveHealthCheckHealthy with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ActiveHealthCheckHealthyMultiError, or nil if none found.
func (m *ActiveHealthCheckHealthy) ValidateAll() error {
	return m.validate(true)
}

func (m *ActiveHealthCheckHealthy) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetInterval() != 0 {

		if m.GetInterval() < 1 {
			err := ActiveHealthCheckHealthyValidationError{
				field:  "Interval",
				reason: "value must be greater than or equal to 1",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(m.GetHttpStatuses()) > 0 {

		if len(m.GetHttpStatuses()) < 1 {
			err := ActiveHealthCheckHealthyValidationError{
				field:  "HttpStatuses",
				reason: "value must contain at least 1 item(s)",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		_ActiveHealthCheckHealthy_HttpStatuses_Unique := make(map[int32]struct{}, len(m.GetHttpStatuses()))

		for idx, item := range m.GetHttpStatuses() {
			_, _ = idx, item

			if _, exists := _ActiveHealthCheckHealthy_HttpStatuses_Unique[item]; exists {
				err := ActiveHealthCheckHealthyValidationError{
					field:  fmt.Sprintf("HttpStatuses[%v]", idx),
					reason: "repeated value must contain unique items",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			} else {
				_ActiveHealthCheckHealthy_HttpStatuses_Unique[item] = struct{}{}
			}

			if val := item; val < 200 || val > 599 {
				err := ActiveHealthCheckHealthyValidationError{
					field:  fmt.Sprintf("HttpStatuses[%v]", idx),
					reason: "value must be inside range [200, 599]",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}

	}

	if m.GetSuccesses() != 0 {

		if val := m.GetSuccesses(); val < 1 || val > 254 {
			err := ActiveHealthCheckHealthyValidationError{
				field:  "Successes",
				reason: "value must be inside range [1, 254]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return ActiveHealthCheckHealthyMultiError(errors)
	}
	return nil
}

// ActiveHealthCheckHealthyMultiError is an error wrapping multiple validation
// errors returned by ActiveHealthCheckHealthy.ValidateAll() if the designated
// constraints aren't met.
type ActiveHealthCheckHealthyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ActiveHealthCheckHealthyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ActiveHealthCheckHealthyMultiError) AllErrors() []error { return m }

// ActiveHealthCheckHealthyValidationError is the validation error returned by
// ActiveHealthCheckHealthy.Validate if the designated constraints aren't met.
type ActiveHealthCheckHealthyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ActiveHealthCheckHealthyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ActiveHealthCheckHealthyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ActiveHealthCheckHealthyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ActiveHealthCheckHealthyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ActiveHealthCheckHealthyValidationError) ErrorName() string {
	return "ActiveHealthCheckHealthyValidationError"
}

// Error satisfies the builtin error interface
func (e ActiveHealthCheckHealthyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sActiveHealthCheckHealthy.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ActiveHealthCheckHealthyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ActiveHealthCheckHealthyValidationError{}

// Validate checks the field values on ActiveHealthCheckUnhealthy with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ActiveHealthCheckUnhealthy) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ActiveHealthCheckUnhealthy with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ActiveHealthCheckUnhealthyMultiError, or nil if none found.
func (m *ActiveHealthCheckUnhealthy) ValidateAll() error {
	return m.validate(true)
}

func (m *ActiveHealthCheckUnhealthy) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetInterval() != 0 {

		if m.GetInterval() < 1 {
			err := ActiveHealthCheckUnhealthyValidationError{
				field:  "Interval",
				reason: "value must be greater than or equal to 1",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(m.GetHttpStatuses()) > 0 {

		if len(m.GetHttpStatuses()) < 1 {
			err := ActiveHealthCheckUnhealthyValidationError{
				field:  "HttpStatuses",
				reason: "value must contain at least 1 item(s)",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		_ActiveHealthCheckUnhealthy_HttpStatuses_Unique := make(map[int32]struct{}, len(m.GetHttpStatuses()))

		for idx, item := range m.GetHttpStatuses() {
			_, _ = idx, item

			if _, exists := _ActiveHealthCheckUnhealthy_HttpStatuses_Unique[item]; exists {
				err := ActiveHealthCheckUnhealthyValidationError{
					field:  fmt.Sprintf("HttpStatuses[%v]", idx),
					reason: "repeated value must contain unique items",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			} else {
				_ActiveHealthCheckUnhealthy_HttpStatuses_Unique[item] = struct{}{}
			}

			if val := item; val < 200 || val > 599 {
				err := ActiveHealthCheckUnhealthyValidationError{
					field:  fmt.Sprintf("HttpStatuses[%v]", idx),
					reason: "value must be inside range [200, 599]",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}

	}

	if m.GetHttpFailures() != 0 {

		if val := m.GetHttpFailures(); val < 1 || val > 254 {
			err := ActiveHealthCheckUnhealthyValidationError{
				field:  "HttpFailures",
				reason: "value must be inside range [1, 254]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetTcpFailures() != 0 {

		if val := m.GetTcpFailures(); val < 1 || val > 254 {
			err := ActiveHealthCheckUnhealthyValidationError{
				field:  "TcpFailures",
				reason: "value must be inside range [1, 254]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetTimeouts() != 0 {

		if val := m.GetTimeouts(); val < 1 || val > 254 {
			err := ActiveHealthCheckUnhealthyValidationError{
				field:  "Timeouts",
				reason: "value must be inside range [1, 254]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return ActiveHealthCheckUnhealthyMultiError(errors)
	}
	return nil
}

// ActiveHealthCheckUnhealthyMultiError is an error wrapping multiple
// validation errors returned by ActiveHealthCheckUnhealthy.ValidateAll() if
// the designated constraints aren't met.
type ActiveHealthCheckUnhealthyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ActiveHealthCheckUnhealthyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ActiveHealthCheckUnhealthyMultiError) AllErrors() []error { return m }

// ActiveHealthCheckUnhealthyValidationError is the validation error returned
// by ActiveHealthCheckUnhealthy.Validate if the designated constraints aren't met.
type ActiveHealthCheckUnhealthyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ActiveHealthCheckUnhealthyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ActiveHealthCheckUnhealthyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ActiveHealthCheckUnhealthyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ActiveHealthCheckUnhealthyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ActiveHealthCheckUnhealthyValidationError) ErrorName() string {
	return "ActiveHealthCheckUnhealthyValidationError"
}

// Error satisfies the builtin error interface
func (e ActiveHealthCheckUnhealthyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sActiveHealthCheckUnhealthy.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ActiveHealthCheckUnhealthyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ActiveHealthCheckUnhealthyValidationError{}

// Validate checks the field values on PassiveHealthCheckHealthy with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PassiveHealthCheckHealthy) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PassiveHealthCheckHealthy with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PassiveHealthCheckHealthyMultiError, or nil if none found.
func (m *PassiveHealthCheckHealthy) ValidateAll() error {
	return m.validate(true)
}

func (m *PassiveHealthCheckHealthy) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetHttpStatuses()) > 0 {

		if len(m.GetHttpStatuses()) < 1 {
			err := PassiveHealthCheckHealthyValidationError{
				field:  "HttpStatuses",
				reason: "value must contain at least 1 item(s)",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		_PassiveHealthCheckHealthy_HttpStatuses_Unique := make(map[int32]struct{}, len(m.GetHttpStatuses()))

		for idx, item := range m.GetHttpStatuses() {
			_, _ = idx, item

			if _, exists := _PassiveHealthCheckHealthy_HttpStatuses_Unique[item]; exists {
				err := PassiveHealthCheckHealthyValidationError{
					field:  fmt.Sprintf("HttpStatuses[%v]", idx),
					reason: "repeated value must contain unique items",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			} else {
				_PassiveHealthCheckHealthy_HttpStatuses_Unique[item] = struct{}{}
			}

			if val := item; val < 200 || val > 599 {
				err := PassiveHealthCheckHealthyValidationError{
					field:  fmt.Sprintf("HttpStatuses[%v]", idx),
					reason: "value must be inside range [200, 599]",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}

	}

	if m.GetSuccesses() != 0 {

		if val := m.GetSuccesses(); val < 1 || val > 254 {
			err := PassiveHealthCheckHealthyValidationError{
				field:  "Successes",
				reason: "value must be inside range [1, 254]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return PassiveHealthCheckHealthyMultiError(errors)
	}
	return nil
}

// PassiveHealthCheckHealthyMultiError is an error wrapping multiple validation
// errors returned by PassiveHealthCheckHealthy.ValidateAll() if the
// designated constraints aren't met.
type PassiveHealthCheckHealthyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PassiveHealthCheckHealthyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PassiveHealthCheckHealthyMultiError) AllErrors() []error { return m }

// PassiveHealthCheckHealthyValidationError is the validation error returned by
// PassiveHealthCheckHealthy.Validate if the designated constraints aren't met.
type PassiveHealthCheckHealthyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PassiveHealthCheckHealthyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PassiveHealthCheckHealthyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PassiveHealthCheckHealthyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PassiveHealthCheckHealthyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PassiveHealthCheckHealthyValidationError) ErrorName() string {
	return "PassiveHealthCheckHealthyValidationError"
}

// Error satisfies the builtin error interface
func (e PassiveHealthCheckHealthyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPassiveHealthCheckHealthy.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PassiveHealthCheckHealthyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PassiveHealthCheckHealthyValidationError{}

// Validate checks the field values on PassiveHealthCheckUnhealthy with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PassiveHealthCheckUnhealthy) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PassiveHealthCheckUnhealthy with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PassiveHealthCheckUnhealthyMultiError, or nil if none found.
func (m *PassiveHealthCheckUnhealthy) ValidateAll() error {
	return m.validate(true)
}

func (m *PassiveHealthCheckUnhealthy) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetHttpStatuses()) > 0 {

		if len(m.GetHttpStatuses()) < 1 {
			err := PassiveHealthCheckUnhealthyValidationError{
				field:  "HttpStatuses",
				reason: "value must contain at least 1 item(s)",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		_PassiveHealthCheckUnhealthy_HttpStatuses_Unique := make(map[int32]struct{}, len(m.GetHttpStatuses()))

		for idx, item := range m.GetHttpStatuses() {
			_, _ = idx, item

			if _, exists := _PassiveHealthCheckUnhealthy_HttpStatuses_Unique[item]; exists {
				err := PassiveHealthCheckUnhealthyValidationError{
					field:  fmt.Sprintf("HttpStatuses[%v]", idx),
					reason: "repeated value must contain unique items",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			} else {
				_PassiveHealthCheckUnhealthy_HttpStatuses_Unique[item] = struct{}{}
			}

			if val := item; val < 200 || val > 599 {
				err := PassiveHealthCheckUnhealthyValidationError{
					field:  fmt.Sprintf("HttpStatuses[%v]", idx),
					reason: "value must be inside range [200, 599]",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}

	}

	if m.GetHttpFailures() != 0 {

		if val := m.GetHttpFailures(); val < 1 || val > 254 {
			err := PassiveHealthCheckUnhealthyValidationError{
				field:  "HttpFailures",
				reason: "value must be inside range [1, 254]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetTcpFailures() != 0 {

		if val := m.GetTcpFailures(); val < 1 || val > 254 {
			err := PassiveHealthCheckUnhealthyValidationError{
				field:  "TcpFailures",
				reason: "value must be inside range [1, 254]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetTimeouts() != 0 {

		if val := m.GetTimeouts(); val < 1 || val > 254 {
			err := PassiveHealthCheckUnhealthyValidationError{
				field:  "Timeouts",
				reason: "value must be inside range [1, 254]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return PassiveHealthCheckUnhealthyMultiError(errors)
	}
	return nil
}

// PassiveHealthCheckUnhealthyMultiError is an error wrapping multiple
// validation errors returned by PassiveHealthCheckUnhealthy.ValidateAll() if
// the designated constraints aren't met.
type PassiveHealthCheckUnhealthyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PassiveHealthCheckUnhealthyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PassiveHealthCheckUnhealthyMultiError) AllErrors() []error { return m }

// PassiveHealthCheckUnhealthyValidationError is the validation error returned
// by PassiveHealthCheckUnhealthy.Validate if the designated constraints
// aren't met.
type PassiveHealthCheckUnhealthyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PassiveHealthCheckUnhealthyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PassiveHealthCheckUnhealthyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PassiveHealthCheckUnhealthyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PassiveHealthCheckUnhealthyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PassiveHealthCheckUnhealthyValidationError) ErrorName() string {
	return "PassiveHealthCheckUnhealthyValidationError"
}

// Error satisfies the builtin error interface
func (e PassiveHealthCheckUnhealthyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPassiveHealthCheckUnhealthy.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PassiveHealthCheckUnhealthyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PassiveHealthCheckUnhealthyValidationError{}

// Validate checks the field values on Node with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Node) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Node with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in NodeMultiError, or nil if none found.
func (m *Node) ValidateAll() error {
	return m.validate(true)
}

func (m *Node) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_Node_Host_Pattern.MatchString(m.GetHost()) {
		err := NodeValidationError{
			field:  "Host",
			reason: "value does not match regex pattern \"^\\\\*?[0-9a-zA-Z-._]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPort(); val < 1 || val > 65535 {
		err := NodeValidationError{
			field:  "Port",
			reason: "value must be inside range [1, 65535]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetWeight() < 0 {
		err := NodeValidationError{
			field:  "Weight",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for key, val := range m.GetMetadata() {
		_ = val

		// no validation rules for Metadata[key]

		if all {
			switch v := interface{}(val).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, NodeValidationError{
						field:  fmt.Sprintf("Metadata[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, NodeValidationError{
						field:  fmt.Sprintf("Metadata[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NodeValidationError{
					field:  fmt.Sprintf("Metadata[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return NodeMultiError(errors)
	}
	return nil
}

// NodeMultiError is an error wrapping multiple validation errors returned by
// Node.ValidateAll() if the designated constraints aren't met.
type NodeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NodeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NodeMultiError) AllErrors() []error { return m }

// NodeValidationError is the validation error returned by Node.Validate if the
// designated constraints aren't met.
type NodeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NodeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NodeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NodeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NodeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NodeValidationError) ErrorName() string { return "NodeValidationError" }

// Error satisfies the builtin error interface
func (e NodeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNode.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NodeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NodeValidationError{}

var _Node_Host_Pattern = regexp.MustCompile("^\\*?[0-9a-zA-Z-._]+$")

// Validate checks the field values on Upstream_Timeout with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *Upstream_Timeout) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Upstream_Timeout with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Upstream_TimeoutMultiError, or nil if none found.
func (m *Upstream_Timeout) ValidateAll() error {
	return m.validate(true)
}

func (m *Upstream_Timeout) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetConnect() <= 0 {
		err := Upstream_TimeoutValidationError{
			field:  "Connect",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetSend() <= 0 {
		err := Upstream_TimeoutValidationError{
			field:  "Send",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetRead() <= 0 {
		err := Upstream_TimeoutValidationError{
			field:  "Read",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return Upstream_TimeoutMultiError(errors)
	}
	return nil
}

// Upstream_TimeoutMultiError is an error wrapping multiple validation errors
// returned by Upstream_Timeout.ValidateAll() if the designated constraints
// aren't met.
type Upstream_TimeoutMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Upstream_TimeoutMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Upstream_TimeoutMultiError) AllErrors() []error { return m }

// Upstream_TimeoutValidationError is the validation error returned by
// Upstream_Timeout.Validate if the designated constraints aren't met.
type Upstream_TimeoutValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Upstream_TimeoutValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Upstream_TimeoutValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Upstream_TimeoutValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Upstream_TimeoutValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Upstream_TimeoutValidationError) ErrorName() string { return "Upstream_TimeoutValidationError" }

// Error satisfies the builtin error interface
func (e Upstream_TimeoutValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpstream_Timeout.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Upstream_TimeoutValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Upstream_TimeoutValidationError{}

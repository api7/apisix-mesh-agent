// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: upstream.proto

package apisix

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _upstream_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on HealthCheck with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *HealthCheck) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// HealthCheckValidationError is the validation error returned by
// HealthCheck.Validate if the designated constraints aren't met.
type HealthCheckValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HealthCheckValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HealthCheckValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HealthCheckValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HealthCheckValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HealthCheckValidationError) ErrorName() string { return "HealthCheckValidationError" }

// Error satisfies the builtin error interface
func (e HealthCheckValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHealthCheck.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HealthCheckValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HealthCheckValidationError{}

// Validate checks the field values on Upstream with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Upstream) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetRetries() < 0 {
		return UpstreamValidationError{
			field:  "Retries",
			reason: "value must be greater than or equal to 0",
		}
	}

	if v, ok := interface{}(m.GetTimeout()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpstreamValidationError{
				field:  "Timeout",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if _, ok := _Upstream_Type_InLookup[m.GetType()]; !ok {
		return UpstreamValidationError{
			field:  "Type",
			reason: "value must be in list [chash roundrobin ewma lease_conn]",
		}
	}

	if _, ok := _Upstream_HashOn_InLookup[m.GetHashOn()]; !ok {
		return UpstreamValidationError{
			field:  "HashOn",
			reason: "value must be in list [vars header cookie consumer vars_combination]",
		}
	}

	// no validation rules for Key

	if v, ok := interface{}(m.GetCheck()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpstreamValidationError{
				field:  "Check",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if _, ok := _Upstream_Scheme_InLookup[m.GetScheme()]; !ok {
		return UpstreamValidationError{
			field:  "Scheme",
			reason: "value must be in list [grpc grpcs http https]",
		}
	}

	if _, ok := _Upstream_PassHost_InLookup[m.GetPassHost()]; !ok {
		return UpstreamValidationError{
			field:  "PassHost",
			reason: "value must be in list [pass node rewrite]",
		}
	}

	if !_Upstream_UpstreamHost_Pattern.MatchString(m.GetUpstreamHost()) {
		return UpstreamValidationError{
			field:  "UpstreamHost",
			reason: "value does not match regex pattern \"^\\\\*?[0-9a-zA-Z-._]+$\"",
		}
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 100 {
		return UpstreamValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
	}

	if utf8.RuneCountInString(m.GetDesc()) > 256 {
		return UpstreamValidationError{
			field:  "Desc",
			reason: "value length must be at most 256 runes",
		}
	}

	if v, ok := interface{}(m.GetUpstreamId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpstreamValidationError{
				field:  "UpstreamId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpstreamValidationError is the validation error returned by
// Upstream.Validate if the designated constraints aren't met.
type UpstreamValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpstreamValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpstreamValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpstreamValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpstreamValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpstreamValidationError) ErrorName() string { return "UpstreamValidationError" }

// Error satisfies the builtin error interface
func (e UpstreamValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpstream.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpstreamValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpstreamValidationError{}

var _Upstream_Type_InLookup = map[string]struct{}{
	"chash":      {},
	"roundrobin": {},
	"ewma":       {},
	"lease_conn": {},
}

var _Upstream_HashOn_InLookup = map[string]struct{}{
	"vars":             {},
	"header":           {},
	"cookie":           {},
	"consumer":         {},
	"vars_combination": {},
}

var _Upstream_Scheme_InLookup = map[string]struct{}{
	"grpc":  {},
	"grpcs": {},
	"http":  {},
	"https": {},
}

var _Upstream_PassHost_InLookup = map[string]struct{}{
	"pass":    {},
	"node":    {},
	"rewrite": {},
}

var _Upstream_UpstreamHost_Pattern = regexp.MustCompile("^\\*?[0-9a-zA-Z-._]+$")

// Validate checks the field values on Upstream_Timeout with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *Upstream_Timeout) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetConnect() <= 0 {
		return Upstream_TimeoutValidationError{
			field:  "Connect",
			reason: "value must be greater than 0",
		}
	}

	if m.GetSend() <= 0 {
		return Upstream_TimeoutValidationError{
			field:  "Send",
			reason: "value must be greater than 0",
		}
	}

	if m.GetRead() <= 0 {
		return Upstream_TimeoutValidationError{
			field:  "Read",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// Upstream_TimeoutValidationError is the validation error returned by
// Upstream_Timeout.Validate if the designated constraints aren't met.
type Upstream_TimeoutValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Upstream_TimeoutValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Upstream_TimeoutValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Upstream_TimeoutValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Upstream_TimeoutValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Upstream_TimeoutValidationError) ErrorName() string { return "Upstream_TimeoutValidationError" }

// Error satisfies the builtin error interface
func (e Upstream_TimeoutValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpstream_Timeout.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Upstream_TimeoutValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Upstream_TimeoutValidationError{}

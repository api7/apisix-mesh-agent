// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: plugins.proto

package apisix

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on Plugins with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Plugins) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Plugins with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PluginsMultiError, or nil if none found.
func (m *Plugins) ValidateAll() error {
	return m.validate(true)
}

func (m *Plugins) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTrafficSplit()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PluginsValidationError{
					field:  "TrafficSplit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PluginsValidationError{
					field:  "TrafficSplit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTrafficSplit()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PluginsValidationError{
				field:  "TrafficSplit",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PluginsMultiError(errors)
	}
	return nil
}

// PluginsMultiError is an error wrapping multiple validation errors returned
// by Plugins.ValidateAll() if the designated constraints aren't met.
type PluginsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PluginsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PluginsMultiError) AllErrors() []error { return m }

// PluginsValidationError is the validation error returned by Plugins.Validate
// if the designated constraints aren't met.
type PluginsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PluginsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PluginsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PluginsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PluginsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PluginsValidationError) ErrorName() string { return "PluginsValidationError" }

// Error satisfies the builtin error interface
func (e PluginsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlugins.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PluginsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PluginsValidationError{}

// Validate checks the field values on TrafficSplit with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TrafficSplit) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TrafficSplit with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TrafficSplitMultiError, or
// nil if none found.
func (m *TrafficSplit) ValidateAll() error {
	return m.validate(true)
}

func (m *TrafficSplit) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRules() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TrafficSplitValidationError{
						field:  fmt.Sprintf("Rules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TrafficSplitValidationError{
						field:  fmt.Sprintf("Rules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TrafficSplitValidationError{
					field:  fmt.Sprintf("Rules[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TrafficSplitMultiError(errors)
	}
	return nil
}

// TrafficSplitMultiError is an error wrapping multiple validation errors
// returned by TrafficSplit.ValidateAll() if the designated constraints aren't met.
type TrafficSplitMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TrafficSplitMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TrafficSplitMultiError) AllErrors() []error { return m }

// TrafficSplitValidationError is the validation error returned by
// TrafficSplit.Validate if the designated constraints aren't met.
type TrafficSplitValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TrafficSplitValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TrafficSplitValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TrafficSplitValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TrafficSplitValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TrafficSplitValidationError) ErrorName() string { return "TrafficSplitValidationError" }

// Error satisfies the builtin error interface
func (e TrafficSplitValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTrafficSplit.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TrafficSplitValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TrafficSplitValidationError{}

// Validate checks the field values on TrafficSplitRule with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TrafficSplitRule) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TrafficSplitRule with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TrafficSplitRuleMultiError, or nil if none found.
func (m *TrafficSplitRule) ValidateAll() error {
	return m.validate(true)
}

func (m *TrafficSplitRule) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetMatch() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TrafficSplitRuleValidationError{
						field:  fmt.Sprintf("Match[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TrafficSplitRuleValidationError{
						field:  fmt.Sprintf("Match[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TrafficSplitRuleValidationError{
					field:  fmt.Sprintf("Match[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetWeightedUpstreams() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TrafficSplitRuleValidationError{
						field:  fmt.Sprintf("WeightedUpstreams[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TrafficSplitRuleValidationError{
						field:  fmt.Sprintf("WeightedUpstreams[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TrafficSplitRuleValidationError{
					field:  fmt.Sprintf("WeightedUpstreams[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TrafficSplitRuleMultiError(errors)
	}
	return nil
}

// TrafficSplitRuleMultiError is an error wrapping multiple validation errors
// returned by TrafficSplitRule.ValidateAll() if the designated constraints
// aren't met.
type TrafficSplitRuleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TrafficSplitRuleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TrafficSplitRuleMultiError) AllErrors() []error { return m }

// TrafficSplitRuleValidationError is the validation error returned by
// TrafficSplitRule.Validate if the designated constraints aren't met.
type TrafficSplitRuleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TrafficSplitRuleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TrafficSplitRuleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TrafficSplitRuleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TrafficSplitRuleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TrafficSplitRuleValidationError) ErrorName() string { return "TrafficSplitRuleValidationError" }

// Error satisfies the builtin error interface
func (e TrafficSplitRuleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTrafficSplitRule.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TrafficSplitRuleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TrafficSplitRuleValidationError{}

// Validate checks the field values on TrafficSplitMatch with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TrafficSplitMatch) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TrafficSplitMatch with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TrafficSplitMatchMultiError, or nil if none found.
func (m *TrafficSplitMatch) ValidateAll() error {
	return m.validate(true)
}

func (m *TrafficSplitMatch) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetVars() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TrafficSplitMatchValidationError{
						field:  fmt.Sprintf("Vars[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TrafficSplitMatchValidationError{
						field:  fmt.Sprintf("Vars[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TrafficSplitMatchValidationError{
					field:  fmt.Sprintf("Vars[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TrafficSplitMatchMultiError(errors)
	}
	return nil
}

// TrafficSplitMatchMultiError is an error wrapping multiple validation errors
// returned by TrafficSplitMatch.ValidateAll() if the designated constraints
// aren't met.
type TrafficSplitMatchMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TrafficSplitMatchMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TrafficSplitMatchMultiError) AllErrors() []error { return m }

// TrafficSplitMatchValidationError is the validation error returned by
// TrafficSplitMatch.Validate if the designated constraints aren't met.
type TrafficSplitMatchValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TrafficSplitMatchValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TrafficSplitMatchValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TrafficSplitMatchValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TrafficSplitMatchValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TrafficSplitMatchValidationError) ErrorName() string {
	return "TrafficSplitMatchValidationError"
}

// Error satisfies the builtin error interface
func (e TrafficSplitMatchValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTrafficSplitMatch.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TrafficSplitMatchValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TrafficSplitMatchValidationError{}

// Validate checks the field values on TrafficSplitWeightedUpstreams with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TrafficSplitWeightedUpstreams) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TrafficSplitWeightedUpstreams with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// TrafficSplitWeightedUpstreamsMultiError, or nil if none found.
func (m *TrafficSplitWeightedUpstreams) ValidateAll() error {
	return m.validate(true)
}

func (m *TrafficSplitWeightedUpstreams) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UpstreamId

	// no validation rules for Weight

	if len(errors) > 0 {
		return TrafficSplitWeightedUpstreamsMultiError(errors)
	}
	return nil
}

// TrafficSplitWeightedUpstreamsMultiError is an error wrapping multiple
// validation errors returned by TrafficSplitWeightedUpstreams.ValidateAll()
// if the designated constraints aren't met.
type TrafficSplitWeightedUpstreamsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TrafficSplitWeightedUpstreamsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TrafficSplitWeightedUpstreamsMultiError) AllErrors() []error { return m }

// TrafficSplitWeightedUpstreamsValidationError is the validation error
// returned by TrafficSplitWeightedUpstreams.Validate if the designated
// constraints aren't met.
type TrafficSplitWeightedUpstreamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TrafficSplitWeightedUpstreamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TrafficSplitWeightedUpstreamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TrafficSplitWeightedUpstreamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TrafficSplitWeightedUpstreamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TrafficSplitWeightedUpstreamsValidationError) ErrorName() string {
	return "TrafficSplitWeightedUpstreamsValidationError"
}

// Error satisfies the builtin error interface
func (e TrafficSplitWeightedUpstreamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTrafficSplitWeightedUpstreams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TrafficSplitWeightedUpstreamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TrafficSplitWeightedUpstreamsValidationError{}
